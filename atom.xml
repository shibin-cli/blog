<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>web学习笔记</title>
  
  <subtitle>web学习笔记</subtitle>
  <link href="https://shibin-cli.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://shibin-cli.github.io/blog/"/>
  <updated>2021-01-25T10:03:11.584Z</updated>
  <id>https://shibin-cli.github.io/blog/</id>
  
  <author>
    <name>Shibin You</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>脚手架</title>
    <link href="https://shibin-cli.github.io/blog/2021/01/25/cli/"/>
    <id>https://shibin-cli.github.io/blog/2021/01/25/cli/</id>
    <published>2021-01-25T10:03:11.584Z</published>
    <updated>2021-01-25T10:03:11.584Z</updated>
    
    <content type="html"><![CDATA[<h2 id="脚手架的本质作用"><a href="#脚手架的本质作用" class="headerlink" title="脚手架的本质作用"></a>脚手架的本质作用</h2><p>创建项目的基础解构、提供项目规范和约定</p><ul><li>相同的组织结构</li><li>相同的开发方式</li><li>相同的模块依赖</li><li>相同的工具配置</li><li>相同的基础代码</li></ul><p>常用的脚手架工具</p><ul><li>根据信息创建对应的项目基础结构（create-app、vue-cli）</li><li>Yeoman</li><li>Plop(例如创建一个组件、模块所需的文件)<h2 id="Yeoman"><a href="#Yeoman" class="headerlink" title="Yeoman"></a>Yeoman</h2>安装<a href="https://yeoman.io/">yeoman</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install yo -g</span><br></pre></td></tr></table></figure>安装generator<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装对应的generator</span></span><br><span class="line">npm install generator-node -g</span><br><span class="line"><span class="comment"># 运行脚手架</span></span><br><span class="line">yo node</span><br><span class="line"><span class="comment"># 创建cli文件</span></span><br><span class="line">yo node:cli</span><br></pre></td></tr></table></figure><h3 id="自定义generator"><a href="#自定义generator" class="headerlink" title="自定义generator"></a>自定义generator</h3><img src="https://gitee.com/shibin1/fed-e-task-02-01/raw/master/note/img/2.jpg" alt="generator基本结构"></li></ul><p>Yeoman的Generator模块名称必须是<code>generator-&lt;name&gt;</code></p><p>首先创建对应的项目结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install yeoman-generator</span><br></pre></td></tr></table></figure><p><code>generators/app.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Generator = <span class="built_in">require</span>(<span class="string">&#x27;yeoman-generator&#x27;</span>)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此文件为Generator的入口文件</span></span><br><span class="line"><span class="comment"> * 需要导出一个继承自yeoman-generator的类型</span></span><br><span class="line"><span class="comment"> * 在工作时会自动调用我们在此声明的一些生命周期方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Generator</span> </span>&#123;</span><br><span class="line">    <span class="comment">//生成文件时会调用此方法</span></span><br><span class="line">    <span class="function"><span class="title">wriging</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fs.write(</span><br><span class="line">            <span class="built_in">this</span>.destinationPath(<span class="string">&#x27;test.txt&#x27;</span>),</span><br><span class="line">            <span class="built_in">Math</span>.random().toString()</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm link</span><br><span class="line">yo &lt;name&gt;</span><br></pre></td></tr></table></figure><p>创建模板文件夹<code> generators/app/teplates</code>，该文件夹用于存放模板文件，模板为ejs模板</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Generator = <span class="built_in">require</span>(<span class="string">&#x27;yeoman-generator&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Generator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">wriging</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 对应模板文件夹下的index.html</span></span><br><span class="line">        <span class="keyword">const</span> tpl = <span class="built_in">this</span>.templatePath(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> ctx = &#123; <span class="attr">title</span>: <span class="string">&#x27;Yeoman&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;Yeoman is great!&#x27;</span> &#125;</span><br><span class="line">        <span class="keyword">const</span> output = <span class="built_in">this</span>.destinationPath(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">        <span class="built_in">this</span>.fs.copyTpl(tpl, output, ctx)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收用户输入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Generator</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 用于接收用户输入</span></span><br><span class="line">    <span class="function"><span class="title">prompting</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.prompt([&#123;</span><br><span class="line">            type: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">            name: <span class="string">&#x27;title&#x27;</span>,</span><br><span class="line">            message: <span class="string">&#x27;Your title&#x27;</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="built_in">this</span>.appname</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            type: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">            name: <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">            message: <span class="string">&#x27;Your content&#x27;</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="built_in">this</span>.appname</span><br><span class="line">        &#125;]).then(<span class="function"><span class="params">answers</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(answers)</span><br><span class="line">            <span class="built_in">this</span>.answers = answers</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成文件时会调用此方法</span></span><br><span class="line">    <span class="function"><span class="title">wriging</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 对应模板文件夹下的index.html</span></span><br><span class="line">        <span class="keyword">const</span> tpl = <span class="built_in">this</span>.templatePath(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> ctx = <span class="built_in">this</span>.answers</span><br><span class="line">        <span class="keyword">const</span> output = <span class="built_in">this</span>.destinationPath(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">        <span class="built_in">this</span>.fs.copyTpl(tpl, output, ctx)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Plop"><a href="#Plop" class="headerlink" title="Plop"></a>Plop</h2><ul><li>将<a href="https://github.com/plopjs/plop">plop</a>模块作为项目开发依赖安装</li><li>在项目根目录下创建一个plopfile.js文件,定义脚手架任务</li><li>编写用于生成特定类型文件的模板</li><li>通过Plop提供的CLI运行脚手架服务<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install plop --save-dev</span><br></pre></td></tr></table></figure>plopfile.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">plop</span>=&gt;</span>&#123;</span><br><span class="line">    plop.setGenerator(<span class="string">&#x27;component&#x27;</span>,&#123;</span><br><span class="line">        description: <span class="string">&#x27;create a component&#x27;</span>,</span><br><span class="line">        prompts:[&#123;</span><br><span class="line">            type:<span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">            name:<span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">            message:<span class="string">&#x27;Component name&#x27;</span>,</span><br><span class="line">            <span class="keyword">default</span>:<span class="string">&#x27;MyComponent&#x27;</span></span><br><span class="line">        &#125;],</span><br><span class="line">        actions:[&#123;</span><br><span class="line">            type:<span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">            path:<span class="string">&#x27;src/components/&#123;&#123;name&#125;&#125;/&#123;&#123;name&#125;&#125;.js&#x27;</span>,</span><br><span class="line">            templateFile:<span class="string">&#x27;templates/component.hbs&#x27;</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="脚手架的工作原理"><a href="#脚手架的工作原理" class="headerlink" title="脚手架的工作原理"></a>脚手架的工作原理</h2>创建项目,在package.json文件中指定bin(指定cli的入口文件)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;bin&quot;</span> :<span class="string">&quot;cli.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>cli.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /usr/bin/env node</span></span><br><span class="line"><span class="comment">// cli文件开头必须这样写</span></span><br><span class="line"><span class="comment">// 如果是Linux或macOS系统还需要修改此文件的读写权限为755，具体就是通过 chmod 755 cli.js 实现修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">&#x27;inquirer&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>)</span><br><span class="line">inquirer.prompt([&#123;</span><br><span class="line">    type: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">    message: <span class="string">&#x27;project name&#x27;</span>,</span><br><span class="line">    required:<span class="literal">true</span></span><br><span class="line">&#125;]).then(<span class="function"><span class="params">answers</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!answers.name)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;cancel&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> tmpDir = path.join(__dirname, <span class="string">&#x27;templates&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> destDir = process.cwd()</span><br><span class="line">    fs.readdir(tmpDir, <span class="function">(<span class="params">err, files</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err)</span><br><span class="line">        files.forEach(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">            ejs.renderFile(path.join(tmpDir, file), answers, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err)</span><br><span class="line">                fs.writeFileSync(path.join(destDir, file), res)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;脚手架的本质作用&quot;&gt;&lt;a href=&quot;#脚手架的本质作用&quot; class=&quot;headerlink&quot; title=&quot;脚手架的本质作用&quot;&gt;&lt;/a&gt;脚手架的本质作用&lt;/h2&gt;&lt;p&gt;创建项目的基础解构、提供项目规范和约定&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相同的组织结构&lt;/li&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript性能优化</title>
    <link href="https://shibin-cli.github.io/blog/2021/01/25/performance/"/>
    <id>https://shibin-cli.github.io/blog/2021/01/25/performance/</id>
    <published>2021-01-25T10:03:11.584Z</published>
    <updated>2021-01-25T10:03:11.584Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p>为什么需要使用内存管理</p><h3 id="内存管理介绍"><a href="#内存管理介绍" class="headerlink" title="内存管理介绍"></a>内存管理介绍</h3><p>内存: 有可读写单元组成，表示一片可操作空间</p><p>管理：人为的去操作一片空间的申请、使用和释放</p><p>内存管理：开发者主动申请空间、使用空间、释放空间</p><p>管理流程： 申请 -&gt; 管理 -&gt; 释放</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 申请</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">obj.name = <span class="string">&#x27;aa&#x27;</span></span><br><span class="line"><span class="comment">// 释放</span></span><br><span class="line">obj = <span class="literal">null</span></span><br></pre></td></tr></table></figure><h3 id="Javascript中的垃圾回收"><a href="#Javascript中的垃圾回收" class="headerlink" title="Javascript中的垃圾回收"></a>Javascript中的垃圾回收</h3><ul><li>JavaScript中内存管理是自动的</li><li>对象在不被引用时时垃圾、对象不能从根上访问到时时垃圾</li></ul><p>JavaScript中的可达对象</p><ul><li>可以访问到的对象就是可达对象（引用、作用域链）</li><li>可达的标准就是从根出发是否能够被找到</li><li>JavaScript中的根就可以理解为时全局变量对象</li></ul><p>JavaScript中的引用与可达</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">&#x27;JavaScript&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = obj</span><br><span class="line">obj = <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>上面代码中obj虽然obj赋值为null，但是obj2还在引用obj对象，所以obj依然是可达的</p><h2 id="GC算法"><a href="#GC算法" class="headerlink" title="GC算法"></a>GC算法</h2><ul><li>GC就是垃圾回收机制的简写</li><li>GC可以找到内存中的垃圾、并释放和回收空间</li></ul><p>GC中的垃圾是什么</p><ul><li>程序中不在需要使用的对象</li><li>程序中不能再访问到的对象</li></ul><p>GC算法是什么</p><ul><li>GC算法是一种机制，垃圾回收器完成具体的工作</li><li>工作的内容就是查找垃圾释放空间、回收空间</li><li>算法是工作时查找和回收所遵循的规则</li></ul><p>常见的GC算法</p><ul><li>引用计数</li><li>标记清除</li><li>标记整理</li><li>分代回收</li></ul><h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><ul><li>引用计数的核心就是设置引用数，判断当前引用计数是否位0</li><li>引用关系发生改变时修改引用数字</li><li>引用数字为0时，立即回收</li></ul><p>引用计数的优点</p><ul><li>发现垃圾时立即回收</li><li>最大限度的减少程序的暂停</li></ul><p>引用计数的缺点</p><ul><li>无法回收循环引用的对象</li><li>资源开销大</li></ul><p>下面代码就会引起循环引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> obj1 = &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> obj2 = &#123;&#125;</span><br><span class="line">    obj1.name = obj2</span><br><span class="line">    obj2.name = obj1</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br></pre></td></tr></table></figure><h3 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h3><p>分标记和清除两个阶段完成</p><ul><li>遍历所有对象找标记活动对象（查询所有的可达对象进行标记）</li><li>遍历所有对象清除没有标记的对象</li><li>回收相应的空间</li></ul><p>标记清除的优点</p><ul><li>可以解决前面提到的对象引用的问题</li></ul><p>标记清除的缺点</p><ul><li>空间的碎片化</li><li>不能立即回收对象<h3 id="标记整理"><a href="#标记整理" class="headerlink" title="标记整理"></a>标记整理</h3></li><li>标记整理可以看做时标记清除的增强</li><li>标记阶段的操作和标记清除一致</li><li>清除阶段会先执行整理，移动对象位置</li></ul><p>优点</p><ul><li>减少空间碎片化</li><li>不能立即回收对象<h2 id="V8"><a href="#V8" class="headerlink" title="V8"></a>V8</h2></li><li>V8是一款主流的JavaScript执行引擎</li><li>采用即时编译</li><li>V8内存设限</li></ul><h3 id="V8垃圾回收策略"><a href="#V8垃圾回收策略" class="headerlink" title="V8垃圾回收策略"></a>V8垃圾回收策略</h3><p>采用分代回收，内存分为新生代和老生代，针对不同对象采用不同的算法</p><ul><li>新生代对象采用GC算法</li></ul><p>V8常用的GC算法</p><ul><li>分代回收</li><li>空间复制</li><li>标记清除</li><li>标记整理</li><li>标记增量<h3 id="V8内存分配"><a href="#V8内存分配" class="headerlink" title="V8内存分配"></a>V8内存分配</h3></li><li>V8内存空间一分为二</li><li>小空间用于存储新生代对象（32M | 16M）,新生代指的是存活时间较短的对象</li></ul><h3 id="新生代对象回收实现"><a href="#新生代对象回收实现" class="headerlink" title="新生代对象回收实现"></a>新生代对象回收实现</h3><ul><li>回收过程采用复制算法+标记整理</li><li>新生代存储分为两个等大小空间</li><li>使用空间为from,空闲空间为to</li><li>活动对象存储与from空间，标记整理后活动对象拷贝至To</li><li>from与to交换空间完成释放</li></ul><p>回收过程细节说明</p><ul><li>拷贝过程中会出现晋升，晋升就是将新生代对象移动至老生代</li><li>一轮GC还存活的的新生代需要晋升</li><li>To空间的使用率超过25%需要晋升</li></ul><h3 id="老生代对象回收"><a href="#老生代对象回收" class="headerlink" title="老生代对象回收"></a>老生代对象回收</h3><p>老生代对象指的就是存活时间较长的对象</p><p>老生代对象限制：64位操作系统1.4G、32位操作系统700M</p><p>回收</p><ul><li>只要采用标记清除、标记整理、标记增量算法</li><li>首先采用标记清除完成垃圾回收空间的清除</li><li>采用标记整理进行空间优化（晋升时触发）</li><li>采用增量标记进行效率优化</li></ul><p>程序触发垃圾回收后，会遍历对象进行标记，之后标记和程序执行交替进行（将标记操作分成了多步，程序停顿的时间拆分成了多个小段），标记操作完成后，完成清除，程序继续执行<br><img src="./images/1611306361.jpg" alt="标记增量回收过程"></p><p>新生代与老生代回收对比</p><ul><li>新生代区域垃圾回收使用空间交换时间</li><li>老生代区域垃圾回收不适合复制算法</li></ul><h2 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h2><p>GC的目的是为了实现内存空间的良性循环，Performance提供多种监控方式</p><p>打开浏览器控制台，选择Performance，开启录制功能</p><h3 id="内存问题的外在表现"><a href="#内存问题的外在表现" class="headerlink" title="内存问题的外在表现"></a>内存问题的外在表现</h3><ul><li>页面出现延迟加载或经常性暂停</li><li>页面出现出现持续糟糕的性能</li><li>页面的性能随着时间延长越来越差</li></ul><h3 id="监控内存的几种方式"><a href="#监控内存的几种方式" class="headerlink" title="监控内存的几种方式"></a>监控内存的几种方式</h3><p>界定内存问题的标准</p><ul><li>内存泄漏：内存使用持续升高</li><li>内存膨胀：在多数设备上都存在性能问题</li><li>频繁的垃圾回收：通过内存变化图进行分析</li></ul><p>内存监控的几种方式</p><ul><li>浏览器的任务管理器（<code>shift + esc</code>）</li><li>Timeline时序图记录</li><li>堆快照查找分离DOM（浏览器控制台&gt;内存）</li></ul><p>频繁的垃圾回收</p><ul><li>timtLine中频繁的上升或下降</li><li>任务管理器数据频繁的增加减少</li></ul><h2 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h2><p>可通过 <a href="https://jsperf.com/">https://jsperf.com/</a> 对代码进行性能测试</p><h3 id="慎用全局变量"><a href="#慎用全局变量" class="headerlink" title="慎用全局变量"></a>慎用全局变量</h3><p>为什么要慎用</p><ul><li>全局变量定义在全局执行上下文，是所有作用域链的顶端</li><li>全局执行上下文一直存在于上下文执行栈，直到程序退出</li><li>如果某个局部作用域出现了同名变量则会遮蔽或污染全局</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;内存管理&quot;&gt;&lt;a href=&quot;#内存管理&quot; class=&quot;headerlink&quot; title=&quot;内存管理&quot;&gt;&lt;/a&gt;内存管理&lt;/h2&gt;&lt;p&gt;为什么需要使用内存管理&lt;/p&gt;
&lt;h3 id=&quot;内存管理介绍&quot;&gt;&lt;a href=&quot;#内存管理介绍&quot; class=&quot;heade</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>es6基础</title>
    <link href="https://shibin-cli.github.io/blog/2021/01/25/es6+/"/>
    <id>https://shibin-cli.github.io/blog/2021/01/25/es6+/</id>
    <published>2021-01-25T10:03:11.584Z</published>
    <updated>2021-01-25T10:03:11.584Z</updated>
    
    <content type="html"><![CDATA[<p>部分内容参考了<a href="https://es6.ruanyifeng.com/">《ECMAScript 6 入门》</a></p><h2 id="ES2015"><a href="#ES2015" class="headerlink" title="ES2015"></a>ES2015</h2><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>在es6之前，只有两种作用域</p><ul><li>全局作用域</li><li>函数作用域</li></ul><p>es6新增了块级作用域，可以使用<code>let</code>和<code>const</code>声明</p><h4 id="let"><a href="#let" class="headerlink" title="let"></a>let</h4><p>let 可以用来声明变量，它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//100</span></span><br></pre></td></tr></table></figure><p>将变量a换成使用let或const声明后,就会报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure><p>如果使用let，声明的变量仅在块级作用域内有效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>上面代码中，变量i是let声明的，当前的i只在本轮循环有效，所以每一次循环的i其实都是一个新的变量，所以最后输出的是6。</p><h5 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h5><p>var命令会发生“变量提升”现象，即变量可以在声明之前使用，值为undefined。但let或const声明的变量不存在变量提升</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var 的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// 输出undefined</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let 的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// 报错ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h5 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  tmp = <span class="string">&#x27;abc&#x27;</span>; <span class="comment">// ReferenceError</span></span><br><span class="line">  <span class="keyword">let</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，存在全局变量tmp，但是块级作用域内let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，所以在let声明变量前，对tmp赋值会报错。</p><p>ES6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p><p>总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。</p><h5 id="不允许重复声明"><a href="#不允许重复声明" class="headerlink" title="不允许重复声明"></a>不允许重复声明</h5><p>let不允许在相同作用域内，重复声明同一个变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><p>const用来声明一个只读的常量。一旦声明，常量的值就不能改变。其他的跟let一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 foo 添加一个属性，可以成功</span></span><br><span class="line">foo.prop = <span class="number">123</span>;</span><br><span class="line">foo.prop <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 foo 指向另一个对象，就会报错</span></span><br><span class="line">foo = &#123;&#125;; <span class="comment">// TypeError: &quot;foo&quot; is read-only</span></span><br></pre></td></tr></table></figure><p>在开发环境允许的条件下，声明变量时不要使用var，能用const就使用const，不能用就使用let</p><h3 id="变量解构赋值"><a href="#变量解构赋值" class="headerlink" title="变量解构赋值"></a>变量解构赋值</h3><h4 id="数组的解构"><a href="#数组的解构" class="headerlink" title="数组的解构"></a>数组的解构</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a, b, c) <span class="comment">// 1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [, , d] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(d) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [, d] = [<span class="number">1</span>]</span><br><span class="line"><span class="built_in">console</span>.log(d) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。如果匹配不成功，变量的值就是<code>undefined</code></p><p>可以使用<code>...</code>来匹配剩余的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [e, , ...f] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="built_in">console</span>.log(f) <span class="comment">// [ 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure><p>默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y = <span class="string">&#x27;b&#x27;</span>] = [<span class="string">&#x27;a&#x27;</span>]; <span class="comment">// x=&#x27;a&#x27;, y=&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure><p>注意，ES6 内部使用严格相等运算符（===），判断一个位置是否有值。所以，只有当一个数组成员严格等于undefined，默认值才会生效。</p><h4 id="对象的解构"><a href="#对象的解构" class="headerlink" title="对象的解构"></a>对象的解构</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">lconst obj = &#123;</span><br><span class="line">    name: <span class="string">&#x27;Shibin&#x27;</span>,</span><br><span class="line">    age: <span class="string">&#x27;17&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; name, age &#125; = obj</span><br><span class="line"><span class="built_in">console</span>.log(name, age) <span class="comment">//Shibin 17</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果变量名与属性名不一致，可以这样写</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">name</span>: MyName &#125; = obj</span><br><span class="line"><span class="built_in">console</span>.log(MyName)</span><br><span class="line"><span class="comment">// 默认值</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">title</span>: myTitle = <span class="string">&#x27;Hello&#x27;</span> &#125; = obj</span><br><span class="line"><span class="built_in">console</span>.log(myTitle) <span class="comment">//Hello</span></span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h4><p>模板字符串中嵌入变量，需要将变量名写在${}之中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Shibin&#x27;</span></span><br><span class="line"><span class="keyword">const</span> msg = <span class="string">`Hello,<span class="subst">$&#123;name&#125;</span>`</span> </span><br><span class="line"><span class="built_in">console</span>.log(msg) <span class="comment">// Hello,Shibin</span></span><br></pre></td></tr></table></figure><p>大括号内部可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`1 + 2 = <span class="subst">$&#123;<span class="number">1</span> + <span class="number">2</span>&#125;</span>`</span>) <span class="comment">// 1 + 2 = 3</span></span><br></pre></td></tr></table></figure><p>如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。</p><h5 id="带标签的模板字符串"><a href="#带标签的模板字符串" class="headerlink" title="带标签的模板字符串"></a>带标签的模板字符串</h5><p>模板字符串可以紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Shibin&#x27;</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="string">&#x27;17&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params">str, name, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(str) <span class="comment">// [ &#x27;My name is &#x27;, &quot;. I&#x27;m &quot;, &#x27; years old&#x27; ]</span></span><br><span class="line">    <span class="built_in">console</span>.log(name, age) <span class="comment">// Shibin 17</span></span><br><span class="line">    <span class="keyword">let</span> old = age &gt; <span class="number">1</span> ? <span class="string">`<span class="subst">$&#123;age&#125;</span> years old`</span> : <span class="string">`<span class="subst">$&#123;age&#125;</span> year old`</span></span><br><span class="line">    <span class="keyword">return</span> str[<span class="number">0</span>] + name + str[<span class="number">1</span>] + old</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> res = myFunc<span class="string">`My name is <span class="subst">$&#123;name&#125;</span>. I&#x27;m <span class="subst">$&#123;age&#125;</span>`</span></span><br><span class="line"><span class="built_in">console</span>.log(res) <span class="comment">// My name is Shibin. I&#x27;m 1 year old</span></span><br></pre></td></tr></table></figure><h4 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h4><ul><li>includes  是否包含xxx字符串</li><li>startsWith 是否以xxx开头</li><li>endsWith  是否以xxx结尾<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;https//www.github.com&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(a.includes(<span class="string">&#x27;github&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a.startsWith(<span class="string">&#x27;https&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a.endsWith(<span class="string">&#x27;com&#x27;</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">x, y = <span class="string">&#x27;World&#x27;</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log(<span class="string">&#x27;Hello&#x27;</span>) <span class="comment">// Hello World</span></span><br></pre></td></tr></table></figure>通常情况下，定义了默认值的参数，应该是函数的尾参数。因为这样比较容易看出来，到底省略了哪些参数。如果非尾部的参数设置默认值，实际上这个参数是没法省略的。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x = <span class="number">1</span>, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f() <span class="comment">// [1, undefined]</span></span><br><span class="line">f(<span class="number">2</span>) <span class="comment">// [2, undefined]</span></span><br><span class="line">f(, <span class="number">1</span>) <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>所以在使用开发过程中,一定要没有默认值的参数在前，有默认值的参数在后</li></ul><p>可以使用…获取剩余的参数,也要放到最后再使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, ...b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b) <span class="comment">// [ 2, 3, 4, 5 ]</span></span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="展开数组和对象"><a href="#展开数组和对象" class="headerlink" title="展开数组和对象"></a>展开数组和对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="built_in">console</span>.log([...a]) <span class="comment">// [ 1, 2, 3, 4 ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">&#x27;Shibin&#x27;</span>,</span><br><span class="line">    age: <span class="string">&#x27;17&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(&#123;</span><br><span class="line">    ...obj,</span><br><span class="line">    sex: <span class="string">&#x27;boy&#x27;</span></span><br><span class="line">&#125;)<span class="comment">//&#123; name: &#x27;Shibin&#x27;, age: &#x27;17&#x27;, sex: &#x27;boy&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>es6允许使用=&gt;定义函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="params">a</span> =&gt;</span> a</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="params">a</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> getTempItem = <span class="function"><span class="params">id</span> =&gt;</span> (&#123; <span class="attr">id</span>: id, <span class="attr">name</span>: <span class="string">&quot;Temp&quot;</span> &#125;)</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> getTempItem = <span class="function"><span class="params">id</span> =&gt;</span> &#123; <span class="attr">id</span>: id, <span class="attr">name</span>: <span class="string">&quot;Temp&quot;</span> &#125;</span><br></pre></td></tr></table></figure><p>箭头函数不会改变this的指向，即函数内部this指向和函数外面this的指向一样</p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h4><p>当变量名与对象的属性名一样时，可以直接省略调冒号+属性值，写成下面的样子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bar = <span class="string">&#x27;bar&#x27;</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    foo: <span class="number">123</span>,</span><br><span class="line">    bar,</span><br><span class="line">    <span class="function"><span class="title">func</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">123</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    foo: <span class="number">123</span>,</span><br><span class="line">    bar: bar,</span><br><span class="line">    func: <span class="function"><span class="title">func</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">123</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在声明对象时，还可以使用 <code>[计算属性值]: 属性值</code>来声明动态的属性值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    [<span class="string">&#x27;a&#x27;</span> + <span class="string">&#x27;b&#x27;</span>]: <span class="string">&#x27;aabb&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    ab: <span class="string">&#x27;aabb&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h4><p>Object.assign  将多个对象中的属性（可枚举属性）复制到一个目标对象中，后面的属性会覆盖前面的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">    name: <span class="string">&#x27;Shibin&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">    age: <span class="number">17</span>,</span><br><span class="line">    sex: <span class="string">&#x27;boy&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> target = <span class="built_in">Object</span>.assign(obj1, obj2)</span><br><span class="line"><span class="built_in">console</span>.log(target) <span class="comment">// &#123; name: &#x27;Shibin&#x27;, age: 17, sex: &#x27;boy&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h4 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is"></a>Object.is</h4><p>判断两个变量是否相等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>)) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h4><p>Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程</p><p>Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;Shibin&#x27;</span>,</span><br><span class="line">    age: <span class="number">17</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> personProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(person, &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">target, key</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(target, key) <span class="comment">// &#123; name: &#x27;Shibin&#x27;, age: 17 &#125; name</span></span><br><span class="line">        <span class="keyword">return</span> target[key]</span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">target, key, val</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(target, key, val)</span><br><span class="line">        <span class="keyword">if</span>(key === <span class="string">&#x27;age&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> val !== <span class="string">&#x27;number&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;age must be number&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        target[key] = val <span class="comment">// &#123; name: &#x27;Shibin&#x27;, age: 17 &#125; sex boy</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(personProxy.name)</span><br><span class="line"><span class="built_in">console</span>.log(personProxy.age)</span><br><span class="line">personProxy.sex = <span class="string">&#x27;boy&#x27;</span></span><br><span class="line"></span><br><span class="line">age.age = <span class="string">&#x27;aa&#x27;</span> <span class="comment">//报错  Error: age must be number</span></span><br></pre></td></tr></table></figure><h4 id="Proxy相对于Object-defineProperty的优势"><a href="#Proxy相对于Object-defineProperty的优势" class="headerlink" title="Proxy相对于Object.defineProperty的优势"></a>Proxy相对于Object.defineProperty的优势</h4><ul><li>可以监听对象的删除</li><li>更好的支持数组对象的监视<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;Shibin&#x27;</span>,</span><br><span class="line">    age: <span class="number">17</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> personProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(person, &#123;</span><br><span class="line">    <span class="function"><span class="title">deleteProperty</span>(<span class="params">target, key</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(target, key) <span class="comment">// &#123; name: &#x27;Shibin&#x27;, age: 17 &#125; age</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">delete</span> personProxy.age</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">const</span> personArr = <span class="keyword">new</span> <span class="built_in">Proxy</span>(arr, &#123;</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">target, key, val</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(target, key, val)</span><br><span class="line">        target[key] = val  <span class="comment">// [ 1, 2, 3, 4, 5 ] 5 6  </span></span><br><span class="line">                           <span class="comment">// [ 1, 2, 3, 4, 5, 6 ] length 6  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">personArr.push(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br></pre></td></tr></table></figure>Proxy是以非侵入的方式监管了对象的读写</li></ul><p>其他属性参考  <a href="https://es6.ruanyifeng.com/#docs/proxy">https://es6.ruanyifeng.com/#docs/proxy</a></p><h4 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h4><p>Reflect成员方法就是Proxy处理对象的默认实现。Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;Shibin&#x27;</span>,</span><br><span class="line">    age: <span class="number">17</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> personProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(person, &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">target, key, receiver</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, key, receiver)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">target, key, val, receiver</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, key, val, receiver)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>它统一提供了一套用于操作对象的API</p><p>一共提供了13个静态方法</p><ul><li>Reflect.apply(target, thisArg, args)</li><li>Reflect.construct(target, args)</li><li>Reflect.get(target, name, receiver)</li><li>Reflect.set(target, name, value, receiver)</li><li>Reflect.defineProperty(target, name, desc)</li><li>Reflect.deleteProperty(target, name)</li><li>Reflect.has(target, name)</li><li>Reflect.ownKeys(target)</li><li>R*eflect.isExtensible(target)</li><li>Reflect.preventExtensions(target)</li><li>Reflect.getOwnPropertyDescriptor(target, name)</li><li>Reflect.getPrototypeOf(target)</li><li>Reflect.setPrototypeOf(target, prototype)</li></ul><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">say</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Hello,my name is <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;Tom&#x27;</span>)</span><br><span class="line">person.say() <span class="comment">// Hello,my name is Tom</span></span><br></pre></td></tr></table></figure><p>如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">classMethod</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.classMethod() <span class="comment">// &#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line">foo.classMethod()</span><br></pre></td></tr></table></figure><h4 id="Class的继承"><a href="#Class的继承" class="headerlink" title="Class的继承"></a>Class的继承</h4><p>Class 可以通过extends关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">say</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Hello,my name is <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name)</span><br><span class="line">        <span class="built_in">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">sayAge</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> student = <span class="keyword">new</span> Student(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">student.say() <span class="comment">// Hello,my name is Tom</span></span><br><span class="line">student.sayAge() <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><p>super关键字，它在这里表示父类的构造函数，用来新建父类的this对象。 子类必须在constructor方法中调用super方法，否则新建实例时会报错</p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>类似于数组，但是成员的值都是唯一的，没有重复的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">a.add(<span class="number">1</span>).add(<span class="number">2</span>).add(<span class="number">3</span>).add(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// Set(3) &#123; 1, 2, 3 &#125;</span></span><br></pre></td></tr></table></figure><p>Set的方法</p><ul><li>Set.prototype.add(value)：添加某个值，返回 Set 结构本身。</li><li>Set.prototype.delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。</li><li>Set.prototype.has(value)：返回一个布尔值，表示该值是否为Set的成员。</li><li>Set.prototype.clear()：清除所有成员，没有返回值。</li><li>Set.prototype.size：返回Set实例的成员总数。</li></ul><p>Set的遍历操作</p><ul><li>Set.prototype.keys()：返回键名的遍历器</li><li>Set.prototype.values()：返回键值的遍历器</li><li>Set.prototype.entries()：返回键值对的遍历器</li><li>Set.prototype.forEach()：使用回调函数遍历每个成员</li></ul><p>Set转换为数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(a)) <span class="comment">// [ 1, 2, 3 ]</span></span><br><span class="line"><span class="built_in">console</span>.log([...a]) <span class="comment">// [ 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure><h3 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h3><p>WeakSet 结构与 Set 类似，也是不重复的值的集合.但是，它与 Set 有两个区别。</p><ul><li>WeakSet 的成员只能是对象，而不能是其他类型的值。</li><li>WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用。也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。</li></ul><p>这是因为垃圾回收机制依赖引用计数，如果一个值的引用次数不为0，垃圾回收机制就不会释放这块内存。结束使用该值之后，有时会忘记取消引用，导致内存无法释放，进而可能会引发内存泄漏。WeakSet 里面的引用，都不计入垃圾回收机制，所以就不存在这个问题。因此，WeakSet 适合临时存放一组对象，以及存放跟对象绑定的信息。只要这些对象在外部消失，它在 WeakSet 里面的引用就会自动消失。</p><p>这些特点同样适用于 WeakMap 结构。</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    name: <span class="string">&#x27;tom&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">a.set(obj, <span class="number">100</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// Map(1) &#123; &#123; name: &#x27;tom&#x27; &#125; =&gt; 100 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(a.get(obj)) <span class="comment">//100</span></span><br><span class="line"><span class="comment">// 清除set中的内容</span></span><br><span class="line">a.clear() </span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//Map(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>Map实例的属性方法</p><ul><li>size 返回 Map 结构的成员总数。</li><li>Map.prototype.set(key, value)</li><li>Map.prototype.get(key)</li><li>Map.prototype.has(key)  表示某个键是否在当前 Map 对象之中</li><li>Map.prototype.delete(key)  delete删除某个键，返回true。如果删除失败，返回false。</li><li>Map.prototype.clear() 清除所有成员</li></ul><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>一种新的原始数据类型Symbol，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="built_in">Symbol</span>(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Symbol</span>(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(a === b) <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">obj[a] = <span class="number">200</span></span><br><span class="line">obj[b] = <span class="number">100</span></span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">// &#123; [Symbol(123)]: 200, [Symbol(123)]: 100 &#125;</span></span><br></pre></td></tr></table></figure><p>对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 Symbol 类型。</p><p>有时，我们希望重新使用同一个 Symbol 值,可以使用Symbol.for()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s1 === s2) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>Object.keys和for in循环无法获取到属性名为symbol的属性，可以使用getOwnPropertySymbols获取到属性名为symbol的属性</p><h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><p>Iterator 的作用有三个：</p><ul><li>为各种数据结构，提供一个统一的、简便的访问接口</li><li>使得数据结构的成员能够按某种次序排列</li><li>ES6 创造了一种新的遍历命令for…of循环，Iterator 接口主要供for…of消费</li></ul><p>Iterator 的遍历过程是这样的</p><ol><li>创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象</li><li>第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员</li><li>第二次调用指针对象的next方法，指针就指向数据结构的第二个成员</li><li>不断调用指针对象的next方法，直到它指向数据结构的结束位置</li></ol><p>每一次调用next方法，都会返回数据结构的当前成员的信息。具体来说，就是返回一个包含value和done两个属性的对象。其中，value属性是当前成员的值，done属性是一个布尔值，表示遍历是否结束。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现Iterator 接口</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator] : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      next: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          value: <span class="number">1</span>,</span><br><span class="line">          done: <span class="literal">true</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES6 规定，默认的 Iterator 接口部署在数据结构的Symbol.iterator属性，或者说，一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历的”</p><p>原生具备 Iterator 接口的数据结构如下</p><ul><li>Array</li><li>Map</li><li>Set</li><li>String</li><li>TypedArray</li><li>函数的 arguments 对象</li><li>NodeList 对象</li></ul><p>对象（Object）之所以没有默认部署 Iterator 接口，是因为对象的哪个属性先遍历，哪个属性后遍历是不确定的，需要开发者手动指定</p><h3 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h3><p>作为遍历所有数据结构的统一的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">900</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// 100</span></span><br><span class="line"><span class="comment">// 200</span></span><br><span class="line"><span class="comment">// 300</span></span><br><span class="line"><span class="comment">// 400</span></span><br><span class="line"><span class="comment">// 900</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>(arr)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> s) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// 100</span></span><br><span class="line"><span class="comment">// 200</span></span><br><span class="line"><span class="comment">// 300</span></span><br><span class="line"><span class="comment">// 400</span></span><br><span class="line"><span class="comment">// 900</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">m.set(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;tom&#x27;</span>)</span><br><span class="line">m.set(<span class="string">&#x27;age&#x27;</span>,<span class="number">20</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> m) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// [ &#x27;name&#x27;, &#x27;tom&#x27; ]</span></span><br><span class="line"><span class="comment">// [ &#x27;age&#x27;, 20 ]</span></span><br></pre></td></tr></table></figure><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>在function关键字与函数名加上一个星号就是生成器函数，函数体内部可以使用yied表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> res = foo()</span><br><span class="line"><span class="built_in">console</span>.log(res.next()) <span class="comment">//&#123; value: &#x27;foo&#x27;, done: true &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> res = foo()</span><br><span class="line"><span class="built_in">console</span>.log(res.next()) <span class="comment">//&#123; value: &#x27;1&#x27;, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(res.next()) <span class="comment">//&#123; value: &#x27;2&#x27;, done: false &#125;</span></span><br></pre></td></tr></table></figure><p>Generator 函数是分段执行的，yield表达式是暂停执行的标记，而next方法可以恢复执行。</p><p>遍历器对象的next方法的运行逻辑如下。</p><ul><li>遇到yield表达式，就暂停执行后面的操作，并将紧跟在yield后面的那个表达式的值，作为返回的对象的value属性值。</li><li>下一次调用next方法时，再继续往下执行，直到遇到下一个yield表达式。</li><li>如果没有再遇到新的yield表达式，就一直运行到函数结束，直到return语句为止，并将return语句后面的表达式的值，作为返回的对象的value属性值。</li><li>如果该函数没有return语句，则返回的对象的value属性值为undefined。</li></ul><p>yield表达式本身没有返回值，或者说总是返回undefined。next方法可以带一个参数，该参数就会被当作上一个yield表达式的返回值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">next方法没有参数，每次运行到yield表达式，变量reset的值总是undefined。当next方法带一个参数true时，变量reset就被重置为这个参数（即true），因此i会等于-1，下一轮循环就会从-1开始递增。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; <span class="literal">true</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> reset = <span class="keyword">yield</span> i;</span><br><span class="line">    <span class="keyword">if</span>(reset) &#123; i = -<span class="number">1</span>; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = f();</span><br><span class="line"></span><br><span class="line">g.next() <span class="comment">// &#123; value: 0, done: false &#125;</span></span><br><span class="line">g.next() <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">g.next(<span class="literal">true</span>) <span class="comment">// &#123; value: 0, done: false &#125;</span></span><br></pre></td></tr></table></figure><h2 id="ES2016"><a href="#ES2016" class="headerlink" title="ES2016"></a>ES2016</h2><h3 id="Array-prototype-inclodes"><a href="#Array-prototype-inclodes" class="headerlink" title="Array.prototype.inclodes"></a>Array.prototype.inclodes</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>)     <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>)     <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>].includes(<span class="literal">NaN</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>该方法的第二个参数表示搜索的起始位置，默认为0。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度</p><p>indexOf方法有两个缺点，一是不够语义化，它的含义是找到参数值的第一个出现位置，所以要去比较是否不等于-1，表达起来不够直观。二是，它内部使用严格相等运算符（===）进行判断，这会导致对NaN的误判。</p><h3 id="指数运算符"><a href="#指数运算符" class="headerlink" title="指数运算符"></a>指数运算符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">4</span>))</span><br><span class="line"><span class="comment">// es2016</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> ** <span class="number">4</span>)</span><br></pre></td></tr></table></figure><h2 id="ES2017"><a href="#ES2017" class="headerlink" title="ES2017"></a>ES2017</h2><h3 id="bject-values"><a href="#bject-values" class="headerlink" title="bject.values()"></a>bject.values()</h3><p>返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(obj)) <span class="comment">// [ &#x27;bar&#x27;, 42 ]</span></span><br></pre></td></tr></table></figure><h3 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries()"></a>Object.entries()</h3><p>方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;</span><br><span class="line"><span class="built_in">Object</span>.entries(obj)</span><br><span class="line"><span class="comment">// [ [&quot;foo&quot;, &quot;bar&quot;], [&quot;baz&quot;, 42] ]</span></span><br></pre></td></tr></table></figure><p>如果原对象的属性名是一个 Symbol 值，该属性会被忽略。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(&#123; [<span class="built_in">Symbol</span>()]: <span class="number">123</span>, <span class="attr">foo</span>: <span class="string">&#x27;abc&#x27;</span> &#125;))  <span class="comment">// [ [ &#x27;foo&#x27;, &#x27;abc&#x27; ] ]</span></span><br></pre></td></tr></table></figure><p>Object.entries的基本用途是遍历对象的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [k, v] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(obj)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(k, v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// foo bar</span></span><br><span class="line"><span class="comment">// baz 42</span></span><br></pre></td></tr></table></figure><h3 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors"></a>Object.getOwnPropertyDescriptors</h3><p>返回指定对象所有自身属性（非继承属性）的描述对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> f1 = &#123;</span><br><span class="line">    name: <span class="string">&#x27;Shibin&#x27;</span>,</span><br><span class="line">    age: <span class="number">10</span>,</span><br><span class="line">    <span class="keyword">get</span> <span class="title">say</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name + <span class="string">&#x27;:&#x27;</span> + <span class="built_in">this</span>.age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> f2 = <span class="built_in">Object</span>.assign(&#123;&#125;, f1)</span><br><span class="line">f2.age = <span class="number">17</span></span><br><span class="line"><span class="built_in">console</span>.log(f2.say) <span class="comment">//&#123; name: &#x27;Shibin&#x27;, age: 17, say: &#x27;Shibin:10&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> descriptors = <span class="built_in">Object</span>.getOwnPropertyDescriptors(f1)</span><br><span class="line"><span class="keyword">const</span> f3 = <span class="built_in">Object</span>.defineProperties(&#123;&#125;, descriptors)</span><br><span class="line">f3.age = <span class="number">18</span></span><br><span class="line"><span class="built_in">console</span>.log(f3.say) <span class="comment">//Shibin:18</span></span><br></pre></td></tr></table></figure><h3 id="String-prototype-padEnd-String-prototype-padStart"><a href="#String-prototype-padEnd-String-prototype-padStart" class="headerlink" title="String.prototype.padEnd  String.prototype.padStart"></a>String.prototype.padEnd  String.prototype.padStart</h3><p>字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。padStart()用于头部补全，padEnd()用于尾部补全。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str=<span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.padEnd(<span class="number">8</span>, <span class="string">&#x27;0&#x27;</span>)) <span class="comment">// 12300000</span></span><br><span class="line"><span class="built_in">console</span>.log(str.padStart(<span class="number">8</span>, <span class="string">&#x27;0&#x27;</span>)) <span class="comment">// 00000123</span></span><br></pre></td></tr></table></figure><h3 id="伪逗号"><a href="#伪逗号" class="headerlink" title="伪逗号"></a>伪逗号</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数参数末尾添加伪逗号</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a, b,</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;部分内容参考了&lt;a href=&quot;https://es6.ruanyifeng.com/&quot;&gt;《ECMAScript 6 入门》&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;ES2015&quot;&gt;&lt;a href=&quot;#ES2015&quot; class=&quot;headerlink&quot; title=&quot;ES2015</summary>
      
    
    
    
    
  </entry>
  
</feed>
