<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redux的使用</title>
      <link href="/blog/2021/08/02/redux/"/>
      <url>/blog/2021/08/02/redux/</url>
      
        <content type="html"><![CDATA[<h2 id="redux的基本使用"><a href="#redux的基本使用" class="headerlink" title="redux的基本使用"></a>redux的基本使用</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 创建store容器</span><span class="token keyword">const</span> store <span class="token operator">=</span> Redux<span class="token punctuation">.</span><span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token comment">// 创建用于处理状态的reducer函数，dispatch时也会执行</span><span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token comment">// 订阅状态,当状态修改是会触发回调</span>store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 触发action</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>type<span class="token operator">:</span> <span class="token string">'xxx'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装react-redux</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">yarn add redux react<span class="token operator">-</span>redux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当触发action时，会调用reducer处理函数，reducer函数中处理完毕后，就会触发订阅回调</p><p>为什么要使用Redux</p><ul><li>在React中组件通信的数据流是单向的，父组件可以通过props向子组件传递数据，子组件不能向父组件传递数据，修改父组件数据只能将修改的方法传递给子组件</li><li>使用Redux管理数据，Store独立与组件，解决了组件与组件间传递数据困难的问题</li></ul><p>在项目中使用reudx<br><code>react-redux</code>提供了<code>Provider</code>组件，通过Provider组件store传递给内部组件，是内部组件可以访问store中的内容</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>Provider<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.jsx'</span><span class="token punctuation">;</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">&#123;</span>store<span class="token punctuation">&#125;</span><span class="token operator">></span>    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>connect<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>      count<span class="token operator">:</span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token parameter">state</span><span class="token operator">=></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  count<span class="token operator">:</span> state<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>connect中的第二个参数是可以让我们获取到dispatch方法（之前说过dispatch方法会触发action，最终会执行reducer函数）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">...</span><span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token parameter">state</span><span class="token operator">=></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  count<span class="token operator">:</span> state<span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">mapDispatchToProps</span> <span class="token operator">=</span> <span class="token parameter">dispatch</span> <span class="token operator">=></span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      type<span class="token operator">:</span> <span class="token string">'increment'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      type<span class="token operator">:</span> <span class="token string">'decrement'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> mapDispatchToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>处理reducer</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>    createStore<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token keyword">const</span> initState <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    count<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token parameter">state <span class="token operator">=</span> initState<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token string">'decrement'</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'increment'</span><span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>                count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>         <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">return</span> state    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> [object Object] </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rollup</title>
      <link href="/blog/2021/07/18/rollup/"/>
      <url>/blog/2021/07/18/rollup/</url>
      
        <content type="html"><![CDATA[<h2 id="rollup的基本使用"><a href="#rollup的基本使用" class="headerlink" title="rollup的基本使用"></a>rollup的基本使用</h2><p><a href="https://www.rollupjs.com/">Rollup</a>是一个 JavaScript 模块打包器，可以将小块代码编译成大块复杂的代码,Rollup 对代码模块使用新的标准化格式，这些标准都包含在 JavaScript 的 ES6 版本中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i rollup -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用rollup编译文件</p><p>浏览器环境</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rollup main.js --file bundle.js --format iife<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编译node</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rollup main.js --file bundle.js --format cjs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用rollup配置文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 入口文件</span>    input<span class="token operator">:</span> <span class="token string">'src/main.js'</span><span class="token punctuation">,</span>    output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 输出文件</span>        file<span class="token operator">:</span> <span class="token string">'dist/bundle.js'</span><span class="token punctuation">,</span>        <span class="token comment">// 输出文件的格式</span>        format<span class="token operator">:</span> <span class="token string">'iife'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Rollup插件"><a href="#Rollup插件" class="headerlink" title="Rollup插件"></a>Rollup插件</h2><p>插件是Rollup唯一的拓展途径</p><p>下面以<code>rollup-plugin-json</code>为例</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import json from 'rollup-plugin-json'</span></span>export default &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   input: 'src/main.js',</span><span class="token prefix unchanged"> </span><span class="token line">   output: &#123;</span><span class="token prefix unchanged"> </span><span class="token line">       file: 'dist/bundle.js',</span><span class="token prefix unchanged"> </span><span class="token line">       format: 'iife'</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;,</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    plugins:[</span><span class="token prefix inserted">+</span><span class="token line">        json()</span><span class="token prefix inserted">+</span><span class="token line">    ]</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用rollup加载npm模块"><a href="#使用rollup加载npm模块" class="headerlink" title="使用rollup加载npm模块"></a>使用rollup加载npm模块</h3><p>rollup默认只支持路径加载，可以通过使用<code>@rollup/plugin-node-resolve</code>像webpack一样通过模块名称倒入模块</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import resolve from '@rollup/plugin-node-resolve'</span></span>export default &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   input: 'src/main.js',</span><span class="token prefix unchanged"> </span><span class="token line">   output: &#123;</span><span class="token prefix unchanged"> </span><span class="token line">       file: 'dist/bundle.js',</span><span class="token prefix unchanged"> </span><span class="token line">       format: 'iife'</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;,</span><span class="token prefix unchanged"> </span><span class="token line">   plugins:[</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">        resolve()</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   ]</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使rollup支导入commonjs模块"><a href="#使rollup支导入commonjs模块" class="headerlink" title="使rollup支导入commonjs模块"></a>使rollup支导入commonjs模块</h3><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> import commonjs from '@rollup/plugin-commonjs'</span></span>export default &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   input: 'src/main.js',</span><span class="token prefix unchanged"> </span><span class="token line">   output: &#123;</span><span class="token prefix unchanged"> </span><span class="token line">       file: 'dist/bundle.js',</span><span class="token prefix unchanged"> </span><span class="token line">       format: 'iife'</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;,</span><span class="token prefix unchanged"> </span><span class="token line">   plugins:[</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">        commonjs()</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   ]</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码拆分"><a href="#代码拆分" class="headerlink" title="代码拆分"></a>代码拆分</h3><p>Rollup已经支持动态导入</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>sum<span class="token punctuation">&#125;</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>，这里<strong>umd</strong>和<strong>iife</strong>不支持代码拆分</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    input<span class="token operator">:</span> <span class="token string">'src/main.js'</span><span class="token punctuation">,</span>    output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        format<span class="token operator">:</span> <span class="token string">'amd'</span><span class="token punctuation">,</span>        dir<span class="token operator">:</span> <span class="token string">'dist'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多入口打包"><a href="#多入口打包" class="headerlink" title="多入口打包"></a>多入口打包</h3><p>Rollup多入口打包的写法与Webpack类似</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    input<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'src/a.js'</span><span class="token punctuation">,</span> <span class="token string">'src/b.js'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        format<span class="token operator">:</span> <span class="token string">'amd'</span><span class="token punctuation">,</span>        dir<span class="token operator">:</span> <span class="token string">'dist'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    input<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        main<span class="token operator">:</span> <span class="token string">'./a.js'</span><span class="token punctuation">,</span>        b<span class="token operator">:</span> <span class="token string">'./b.js'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        format<span class="token operator">:</span> <span class="token string">'amd'</span><span class="token punctuation">,</span>        dir<span class="token operator">:</span> <span class="token string">'dist'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Rollup选用原则"><a href="#Rollup选用原则" class="headerlink" title="Rollup选用原则"></a>Rollup选用原则</h2><ul><li>加载非ESM的第三方模块比较复杂</li><li>浏览器环境中，代码拆分功能依赖AMD库（代码拆分不支持UMD和IIFE）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块化开发 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS模块化开发</title>
      <link href="/blog/2021/07/10/module/"/>
      <url>/blog/2021/07/10/module/</url>
      
        <content type="html"><![CDATA[<h2 id="模块化开发的演变过程"><a href="#模块化开发的演变过程" class="headerlink" title="模块化开发的演变过程"></a>模块化开发的演变过程</h2><h3 id="按文件划分"><a href="#按文件划分" class="headerlink" title="按文件划分"></a>按文件划分</h3><ul><li>每个功能单独放在不同的文件中</li><li>所有模块都在全局去工作，完全依赖约定存在<ul><li>污染全局作用域</li><li>命名冲突</li><li>无法管理模块的依赖关系<h3 id="命名空间方式"><a href="#命名空间方式" class="headerlink" title="命名空间方式"></a>命名空间方式</h3></li></ul></li><li>每个模块暴露一个全局对象，所有模块成员都挂载到对象中</li><li>虽然减少了全局污染，但是全局污染、命名冲突、依赖关系依然没有解决<h3 id="立即执行函数（IIFE）"><a href="#立即执行函数（IIFE）" class="headerlink" title="立即执行函数（IIFE）"></a>立即执行函数（IIFE）</h3></li><li>实现了内部私有的成员</li><li>通过传参传入依赖项</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token operator">...</span>    window<span class="token punctuation">.</span>xxx <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        xxx<span class="token operator">:</span><span class="token operator">...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jq<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a><a href="https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88">AMD</a></h3><p>异步模块定义规范，通过异步方式加载模块，模块加载不影响后面代码执行，所有依赖模块执行的代码，放在回调函数中，异步模块加载完毕后会执行回调函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span>module<span class="token punctuation">]</span>callback<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>目前主要有两个JavaScript库实现了AMD规范 <a href="https://requirejs.org/">requireJs</a> 和<a href="https://github.com/cujojs/curl">cur</a></p><p>存在问题</p><ul><li>需要引入第三方库，增加额外的代码</li><li>请求js文件频繁<h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3></li><li>每个模块是单独的文件</li><li>每个模块的有自己的作用域</li><li>通过module.exports导出模块；通过require导入模块，后缀名默认为.js，多次require</li><li>加载模块是同步的</li></ul><p><a href="http://javascript.ruanyifeng.com/nodejs/module.html">http://javascript.ruanyifeng.com/nodejs/module.html</a></p><p>由于CommonJS是同步的，所以不适合浏览器环境，在node环境中，模块都是本地文件，加载速度比较快</p><h3 id="CMD-sea-js"><a href="#CMD-sea-js" class="headerlink" title="CMD(sea.js )"></a>CMD(sea.js )</h3><p>类似CommonJS规范，后来被requirejs兼容了</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 模块代码</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="ES-Modules"><a href="#ES-Modules" class="headerlink" title="ES Modules"></a>ES Modules</h3><ul><li>标准化的Module特性</li><li>自动使用严格模式</li><li>export 导出，import导入<ul><li>export导出的不是对象，而是特定的代码</li><li>import 导入只会加载导入的方法，没有导入的方法不会加载</li><li>编译时加载</li></ul></li><li>每个文件都有自己单独的作用域<h2 id="模块标椎规范"><a href="#模块标椎规范" class="headerlink" title="模块标椎规范"></a>模块标椎规范</h2></li><li>NodeJS 采用CommonJS规范</li><li>浏览器采用ES Modules</li></ul><h2 id="ES-Mudules"><a href="#ES-Mudules" class="headerlink" title="ES Mudules"></a>ES Mudules</h2>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块化开发 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>requirejs使用</title>
      <link href="/blog/2021/07/10/requirejs/"/>
      <url>/blog/2021/07/10/requirejs/</url>
      
        <content type="html"><![CDATA[<p>首先<a href="https://requirejs.org/docs/download.html">下载requirejs</a>或直接引用cdn</p><p><a href="https://requirejs.org/">官方文档</a> </p><p><a href="https://www.ruanyifeng.com/blog/2012/11/require_js.html">阮一峰的网络日志</a></p><p>下面部分内容是看了阮一峰大神的文章后写的</p><h2 id="引入requirejs"><a href="#引入requirejs" class="headerlink" title="引入requirejs"></a>引入requirejs</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/requirejs@2.3.6/require.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以这样引入，data-main属性的作用是，指定网页程序的主模块。require.js默认的文件后缀名是js，.js后缀可以不写</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/requirejs@2.3.6/require.js<span class="token punctuation">"</span></span> <span class="token attr-name">data-main</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>主模块的写法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'moduleA'</span><span class="token punctuation">,</span> <span class="token string">'moduleB'</span><span class="token punctuation">,</span> <span class="token string">'moduleC'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">moduleA<span class="token punctuation">,</span> moduleB<span class="token punctuation">,</span> moduleC</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// some code here</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>require函数接收两个参数</p><ul><li>第一个参数是所依赖的模块，类型是数组</li><li>第二个参数是回调函数，引入的所有模块加载成功后会执行<ul><li>回调函数所对应的参数依次对应所导入的模块</li></ul></li></ul><h2 id="模块的加载"><a href="#模块的加载" class="headerlink" title="模块的加载"></a>模块的加载</h2><p>require.config</p><ul><li>可以对模块的加载行为进行自定义。</li><li>参数是个对象<ul><li>paths <ul><li>指定各个模块的加载路径</li><li>模块路径也可以是个网址</li></ul></li><li>baseUrl 指定模块的根路径<pre class="line-numbers language-js" data-language="js"><code class="language-js">require<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    paths<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"jquery"</span><span class="token operator">:</span> <span class="token string">"jquery.min"</span><span class="token punctuation">,</span>        <span class="token string">"underscore"</span><span class="token operator">:</span> <span class="token string">"underscore.min"</span><span class="token punctuation">,</span>        <span class="token string">"backbone"</span><span class="token operator">:</span> <span class="token string">"backbone.min"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>指定模块的根路径<pre class="line-numbers language-js" data-language="js"><code class="language-js">require<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token comment">//  指定模块的根路径</span>    baseUrl<span class="token operator">:</span> <span class="token string">"js/lib"</span><span class="token punctuation">,</span>    paths<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"jquery"</span><span class="token operator">:</span> <span class="token string">"jquery.min"</span><span class="token punctuation">,</span>        <span class="token string">"underscore"</span><span class="token operator">:</span> <span class="token string">"underscore.min"</span><span class="token punctuation">,</span>        <span class="token string">"backbone"</span><span class="token operator">:</span> <span class="token string">"backbone.min"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>模块路径也可以是个网址<pre class="line-numbers language-js" data-language="js"><code class="language-js">require<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    paths<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 模块路径也可以是个网址</span>        <span class="token string">"jquery"</span><span class="token operator">:</span> <span class="token string">"https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>require.js要求，每个模块是一个单独的js文件。这样的话，如果加载多个模块，就会发出多次HTTP请求，会影响网页的加载速度。因此，require.js提供了一个优化工具，当模块部署完毕以后，可以用这个工具将多个模块合并在一个文件中，减少HTTP请求数。</li></ul></li></ul><h2 id="AMD模块的写法"><a href="#AMD模块的写法" class="headerlink" title="AMD模块的写法"></a>AMD模块的写法</h2><p>require.js加载的模块，采用AMD规范。</p><p>模块必须采用特定的define方法来定义</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// math.js</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        add<span class="token operator">:</span> add    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加载模块</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'math'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">math</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当依赖其他模块时，define函数的第一个参数，就是所依赖的模块且必须是一个数组</p><h2 id="CMD模块写法"><a href="#CMD模块写法" class="headerlink" title="CMD模块写法"></a>CMD模块写法</h2><p>requirejs兼容了CMD规范的写法（类CommonJS的写法）</p><p>声明模块，写法1</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    exports<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写法2</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>依赖项的模块</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"foo/title"</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">"my/cart"</span><span class="token punctuation">,</span> <span class="token string">"my/inventory"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">cart<span class="token punctuation">,</span> inventory</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//Define foo/title object in here.</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>导入模块</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            b <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Return the module value</span>        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块化开发 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用模块联邦落地微前端</title>
      <link href="/blog/2021/07/09/moduleFederation/"/>
      <url>/blog/2021/07/09/moduleFederation/</url>
      
        <content type="html"><![CDATA[<p>目前微前端的落地方案</p><ul><li>自组织模式</li><li>基座模式</li><li>模块加载模式</li></ul><p>模块加载模式没有中心容器，可以将任意一个微应用当做项目入口，微应用与微应用之间相互串联，这种模式也叫做<strong>去中心化模式</strong></p><p>webpack5引进了<a href="https://webpack.docschina.org/concepts/module-federation/">Module Federation</a>（模块联邦，简称mf），mf 实际想要做的事，便是把多个无相互依赖、单独部署的应用合并为一个。一个模块既可以导出给其他模块使用，又可以导入一个其他模块</p><p>无论是 <a href="https://zh-hans.single-spa.js.org/docs/getting-started-overview">single-spa</a> 还是 <a href="https://qiankun.umijs.org/zh/guide">qiankun</a>，加载不同模块，都需要有一个容器中心来承载，而在 mf 中，没有且也不需要容器中心（每个应用都可以导出又导入）</p><h2 id="Module-Federation在webpack中的使用"><a href="#Module-Federation在webpack中的使用" class="headerlink" title="Module Federation在webpack中的使用"></a>Module Federation在webpack中的使用</h2><p>项目A，导出应用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> Mfp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>container<span class="token punctuation">.</span>ModuleFederationPluginmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    entry<span class="token operator">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>    output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        filename<span class="token operator">:</span> <span class="token string">'./bundle.js'</span><span class="token punctuation">,</span>        path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist1'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    mode<span class="token operator">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>     devServer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        port<span class="token operator">:</span> <span class="token number">3001</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//  插件</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            template<span class="token operator">:</span> <span class="token string">'./src/index.html'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Mfp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 对外提供的打包后的⽂件名（引⼊时使⽤）</span>            filename<span class="token operator">:</span> <span class="token string">'em.js'</span><span class="token punctuation">,</span>            <span class="token comment">// 当前微应⽤名称</span>            name<span class="token operator">:</span> <span class="token string">'em'</span><span class="token punctuation">,</span>            <span class="token comment">// 暴露的应用内具体模块</span>            exposes<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 名称： 代码路径</span>                <span class="token string">'./exposesModule'</span><span class="token operator">:</span> <span class="token string">'./src/exposesModule.js'</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在项目A的导出文件中提供了一个方法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>项目B，导入应用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 项目B</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> Mfp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>container<span class="token punctuation">.</span>ModuleFederationPluginmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    mode<span class="token operator">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>    entry<span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>    output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        filename<span class="token operator">:</span> <span class="token string">'./bundle.js'</span><span class="token punctuation">,</span>        path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist2'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    devServer<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        port<span class="token operator">:</span> <span class="token number">3002</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            template<span class="token operator">:</span> <span class="token string">'./src/index.html'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Mfp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 导⼊模块</span>            remotes<span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 导⼊后给模块起个别名：“微应⽤名称@地址/导出的⽂件名”</span>                appone<span class="token operator">:</span> <span class="token string">'em@http://localhost:3001/em.js'</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>项目B中使用项目A中提供的方法</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'appone/exposesModule'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>启动两个项目后，可以看到控制台会打印出3这个结果</p><p>项目A，打包后会生成</p><pre class="line-numbers language-none"><code class="language-none">bundle.js em.js  对外提供的打包后的⽂件，代码中会导入 src_exposesModule_js.bundle.jsindex.htmlsrc_exposesModule_js.bundle.js  提供具体模块的文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>项目B会生成</p><pre class="line-numbers language-none"><code class="language-none">bundle.js  代码中会导入http:&#x2F;&#x2F;localhost:3001&#x2F;em.js，也就是上面的em.js文件index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>就这样，实现了项目B导入项目A中的模块</p><p>通过 Module Federation，任意的一个应用都可以作为微应用，为其他应用提供模块，增加了项目的灵活性，但没有统一的基座中心，每个应用维护就非常重要，增加了开发的难度。在项目数量庞大的情况下，管理成本就会提升。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块化开发 </tag>
            
            <tag> 微前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端常用工具</title>
      <link href="/blog/2021/07/03/tools/"/>
      <url>/blog/2021/07/03/tools/</url>
      
        <content type="html"><![CDATA[<h2 id="移动端H5页面调试"><a href="#移动端H5页面调试" class="headerlink" title="移动端H5页面调试"></a>移动端H5页面调试</h2><p>移动端H5页面调试工具 <a href="https://github.com/Tencent/vConsole">vconsole</a></p><h2 id="查看浏览器的兼容性"><a href="#查看浏览器的兼容性" class="headerlink" title="查看浏览器的兼容性"></a>查看浏览器的兼容性</h2><p> JS/CSS/HTML  兼容性问题都可以查看  <a href="https://canisue.com/">https://canisue.com/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript性能优化</title>
      <link href="/blog/2021/01/15/performance/"/>
      <url>/blog/2021/01/15/performance/</url>
      
        <content type="html"><![CDATA[<h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p>为什么需要使用内存管理</p><h3 id="内存管理介绍"><a href="#内存管理介绍" class="headerlink" title="内存管理介绍"></a>内存管理介绍</h3><p>内存: 有可读写单元组成，表示一片可操作空间</p><p>管理：人为的去操作一片空间的申请、使用和释放</p><p>内存管理：开发者主动申请空间、使用空间、释放空间</p><p>管理流程： 申请 -&gt; 管理 -&gt; 释放</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 申请</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'aa'</span><span class="token comment">// 释放</span>obj <span class="token operator">=</span> <span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Javascript中的垃圾回收"><a href="#Javascript中的垃圾回收" class="headerlink" title="Javascript中的垃圾回收"></a>Javascript中的垃圾回收</h3><ul><li>JavaScript中内存管理是自动的</li><li>对象在不被引用时时垃圾、对象不能从根上访问到时时垃圾</li></ul><p>JavaScript中的可达对象</p><ul><li>可以访问到的对象就是可达对象（引用、作用域链）</li><li>可达的标准就是从根出发是否能够被找到</li><li>JavaScript中的根就可以理解为时全局变量对象</li></ul><p>JavaScript中的引用与可达</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'JavaScript'</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> objobj <span class="token operator">=</span> <span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中obj虽然obj赋值为null，但是obj2还在引用obj对象，所以obj依然是可达的</p><h2 id="GC算法"><a href="#GC算法" class="headerlink" title="GC算法"></a>GC算法</h2><ul><li>GC就是垃圾回收机制的简写</li><li>GC可以找到内存中的垃圾、并释放和回收空间</li></ul><p>GC中的垃圾是什么</p><ul><li>程序中不在需要使用的对象</li><li>程序中不能再访问到的对象</li></ul><p>GC算法是什么</p><ul><li>GC算法是一种机制，垃圾回收器完成具体的工作</li><li>工作的内容就是查找垃圾释放空间、回收空间</li><li>算法是工作时查找和回收所遵循的规则</li></ul><p>常见的GC算法</p><ul><li>引用计数</li><li>标记清除</li><li>标记整理</li><li>分代回收</li></ul><h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><ul><li>引用计数的核心就是设置引用数，判断当前引用计数是否位0</li><li>引用关系发生改变时修改引用数字</li><li>引用数字为0时，立即回收</li></ul><p>引用计数的优点</p><ul><li>发现垃圾时立即回收</li><li>最大限度的减少程序的暂停</li></ul><p>引用计数的缺点</p><ul><li>无法回收循环引用的对象</li><li>资源开销大</li></ul><p>下面代码就会引起循环引用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    obj1<span class="token punctuation">.</span>name <span class="token operator">=</span> obj2    obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> obj1<span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h3><p>分标记和清除两个阶段完成</p><ul><li>遍历所有对象找标记活动对象（查询所有的可达对象进行标记）</li><li>遍历所有对象清除没有标记的对象</li><li>回收相应的空间</li></ul><p>标记清除的优点</p><ul><li>可以解决前面提到的对象引用的问题</li></ul><p>标记清除的缺点</p><ul><li>空间的碎片化</li><li>不能立即回收对象<h3 id="标记整理"><a href="#标记整理" class="headerlink" title="标记整理"></a>标记整理</h3></li><li>标记整理可以看做时标记清除的增强</li><li>标记阶段的操作和标记清除一致</li><li>清除阶段会先执行整理，移动对象位置</li></ul><p>优点</p><ul><li>减少空间碎片化</li><li>不能立即回收对象<h2 id="V8"><a href="#V8" class="headerlink" title="V8"></a>V8</h2></li><li>V8是一款主流的JavaScript执行引擎</li><li>采用即时编译</li><li>V8内存设限</li></ul><h3 id="V8垃圾回收策略"><a href="#V8垃圾回收策略" class="headerlink" title="V8垃圾回收策略"></a>V8垃圾回收策略</h3><p>采用分代回收，内存分为新生代和老生代，针对不同对象采用不同的算法</p><ul><li>新生代对象采用GC算法</li></ul><p>V8常用的GC算法</p><ul><li>分代回收</li><li>空间复制</li><li>标记清除</li><li>标记整理</li><li>标记增量<h3 id="V8内存分配"><a href="#V8内存分配" class="headerlink" title="V8内存分配"></a>V8内存分配</h3></li><li>V8内存空间一分为二</li><li>小空间用于存储新生代对象（32M | 16M）,新生代指的是存活时间较短的对象</li></ul><h3 id="新生代对象回收实现"><a href="#新生代对象回收实现" class="headerlink" title="新生代对象回收实现"></a>新生代对象回收实现</h3><ul><li>回收过程采用复制算法+标记整理</li><li>新生代存储分为两个等大小空间</li><li>使用空间为from,空闲空间为to</li><li>活动对象存储与from空间，标记整理后活动对象拷贝至To</li><li>from与to交换空间完成释放</li></ul><p>回收过程细节说明</p><ul><li>拷贝过程中会出现晋升，晋升就是将新生代对象移动至老生代</li><li>一轮GC还存活的的新生代需要晋升</li><li>To空间的使用率超过25%需要晋升</li></ul><h3 id="老生代对象回收"><a href="#老生代对象回收" class="headerlink" title="老生代对象回收"></a>老生代对象回收</h3><p>老生代对象指的就是存活时间较长的对象</p><p>老生代对象限制：64位操作系统1.4G、32位操作系统700M</p><p>回收</p><ul><li>只要采用标记清除、标记整理、标记增量算法</li><li>首先采用标记清除完成垃圾回收空间的清除</li><li>采用标记整理进行空间优化（晋升时触发）</li><li>采用增量标记进行效率优化</li></ul><p>程序触发垃圾回收后，会遍历对象进行标记，之后标记和程序执行交替进行（将标记操作分成了多步，程序停顿的时间拆分成了多个小段），标记操作完成后，完成清除，程序继续执行<br><img src="./images/1611306361.jpg" alt="标记增量回收过程"></p><p>新生代与老生代回收对比</p><ul><li>新生代区域垃圾回收使用空间交换时间</li><li>老生代区域垃圾回收不适合复制算法</li></ul><h2 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h2><p>GC的目的是为了实现内存空间的良性循环，Performance提供多种监控方式</p><p>打开浏览器控制台，选择Performance，开启录制功能</p><h3 id="内存问题的外在表现"><a href="#内存问题的外在表现" class="headerlink" title="内存问题的外在表现"></a>内存问题的外在表现</h3><ul><li>页面出现延迟加载或经常性暂停</li><li>页面出现出现持续糟糕的性能</li><li>页面的性能随着时间延长越来越差</li></ul><h3 id="监控内存的几种方式"><a href="#监控内存的几种方式" class="headerlink" title="监控内存的几种方式"></a>监控内存的几种方式</h3><p>界定内存问题的标准</p><ul><li>内存泄漏：内存使用持续升高</li><li>内存膨胀：在多数设备上都存在性能问题</li><li>频繁的垃圾回收：通过内存变化图进行分析</li></ul><p>内存监控的几种方式</p><ul><li>浏览器的任务管理器（<code>shift + esc</code>）</li><li>Timeline时序图记录</li><li>堆快照查找分离DOM（浏览器控制台&gt;内存）</li></ul><p>频繁的垃圾回收</p><ul><li>timtLine中频繁的上升或下降</li><li>任务管理器数据频繁的增加减少</li></ul><h2 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h2><p>可通过 <a href="https://jsperf.com/">https://jsperf.com/</a> 对代码进行性能测试</p><h3 id="慎用全局变量"><a href="#慎用全局变量" class="headerlink" title="慎用全局变量"></a>慎用全局变量</h3><p>为什么要慎用</p><ul><li>全局变量定义在全局执行上下文，是所有作用域链的顶端</li><li>全局执行上下文一直存在于上下文执行栈，直到程序退出</li><li>如果某个局部作用域出现了同名变量则会遮蔽或污染全局</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 性能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsdoc</title>
      <link href="/blog/2021/01/10/jsdoc/"/>
      <url>/blog/2021/01/10/jsdoc/</url>
      
        <content type="html"><![CDATA[<p>类型注释  <a href="https://jsdoc.app/">https://jsdoc.app/</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * @param  &#123;number&#125; a param1 * @param  &#123;number&#125; b param2 * @returns &#123;number&#125;  * */</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">&#125;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常见的类型注释</p><ul><li><code>@type</code>  变量类型</li><li><code>@param</code>(或<code>@params</code>或<code>@argument</code>) 参数类型</li><li><code>returns</code>(或<code>returns</code>) 返回值类型</li><li><code>typedef</code> 相当于ts中的<code>type Status = &quot;open&quot; | &quot;close&quot;</code></li><li><code>@callback</code> 回调函数  <a href="https://jsdoc.app/tags-callback.html">https://jsdoc.app/tags-callback.html</a></li><li><code>@template</code></li><li><code>@class</code>（<code>@constructor</code>）</li><li><code>@this</code>  函数内部this指向</li><li><code>@extends</code>(<code>@arguments</code>)</li><li><code>enum</code></li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/**@typedef &#123;'open'|'close'&#125; Status */</span><span class="token comment">/**@type &#123;Status&#125; */</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">'close'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在webpack中使用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** @type &#123;import('webpack').Configuration&#125; */</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lerna</title>
      <link href="/blog/2021/01/10/lerna/"/>
      <url>/blog/2021/01/10/lerna/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/lerna/lerna">Lerna</a> 是一个优化基于git+npm的多package项目管理工具</p><p>优势</p><ul><li>大幅度减少重复操作</li><li>提升操作单标椎化</li></ul><h2 id="原生脚手架的痛点"><a href="#原生脚手架的痛点" class="headerlink" title="原生脚手架的痛点"></a>原生脚手架的痛点</h2><ul><li>重复操作，多个package<ul><li>本地link</li><li>依赖安装</li><li>单元测试</li><li>代码提交</li><li>代码发布</li></ul></li><li>版本一致性<ul><li>版本一致性</li><li>发布后相互依赖版本升级</li></ul></li></ul><p>package越多，管理复杂度就越高</p><h2 id="Lerna的使用"><a href="#Lerna的使用" class="headerlink" title="Lerna的使用"></a>Lerna的使用</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> lerna -g<span class="token comment"># 初始化lerna</span>lerna init<span class="token comment"># 创建一个包</span>lerna create core<span class="token comment"># 安装依赖</span>lerna <span class="token function">add</span> xxx<span class="token comment"># 删除依赖</span>lerna clean<span class="token comment"># 给指定package安装依赖</span>lerna <span class="token function">add</span> vue packages/core<span class="token comment"># 重新安装依赖</span>lerna bootstrap<span class="token comment"># 本地项目相互依赖</span>lerna <span class="token function">link</span><span class="token comment"># 执行npm script</span>lerna run<span class="token comment"># 发布</span>lerna publish<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="lerna源码"><a href="#lerna源码" class="headerlink" title="lerna源码"></a>lerna源码</h2><p>首先从github上下载源码 <a href="https://github.com/lerna/lerna">https://github.com/lerna/lerna</a></p><p>然后安装依赖</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果无法安装成功可以修改.npmrc文件，修改镜像地址为淘宝镜像  <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org/</a></p><pre class="line-numbers language-none"><code class="language-none"># just in case a private registry is configured in ~&#x2F;.npmrcregistry &#x3D; https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过查看package.json文件可以看出入口文件为<code>core/lerna/cli.js</code></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  ...  <span class="token property">"bin"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"lerna"</span><span class="token operator">:</span> <span class="token string">"core/lerna/cli.js"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  ...<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>core/lerna/cli.js</code>中引入了<code>core/lerna/cli.js</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token hashbang comment">#!/usr/bin/env node</span><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token comment">/* eslint-disable import/no-dynamic-require, global-require */</span><span class="token keyword">const</span> importLocal <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"import-local"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">importLocal</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"npmlog"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"cli"</span><span class="token punctuation">,</span> <span class="token string">"using local version of lerna"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到很多模块导入时通过<code>@lerna/xxx</code>导入的</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> cli <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@lerna/cli"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它导入的并不是外面npm安装的模块，我们可以查看当前目录下的package.json文件,在这里配置了模块的路径为本地路径，当模块发布时,我们也不必担心，lerna会自动处理模块的导入</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  <span class="token operator">...</span> <span class="token string">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"@lerna/add"</span><span class="token operator">:</span> <span class="token string">"file:../../commands/add"</span><span class="token punctuation">,</span>    <span class="token string">"@lerna/bootstrap"</span><span class="token operator">:</span> <span class="token string">"file:../../commands/bootstrap"</span><span class="token punctuation">,</span>    <span class="token string">"@lerna/changed"</span><span class="token operator">:</span> <span class="token string">"file:../../commands/changed"</span><span class="token punctuation">,</span>    <span class="token string">"@lerna/clean"</span><span class="token operator">:</span> <span class="token string">"file:../../commands/clean"</span><span class="token punctuation">,</span>    <span class="token operator">...</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="yargs"><a href="#yargs" class="headerlink" title="yargs"></a>yargs</h3><p>lerna中使用了<a href="https://github.com/yargs/yargs">yargs</a>这个模块，所以首先要了解yargs如何使用</p><h4 id="实现一个yargs最简单的脚手架"><a href="#实现一个yargs最简单的脚手架" class="headerlink" title="实现一个yargs最简单的脚手架"></a>实现一个yargs最简单的脚手架</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token hashbang comment">#! /usr/bin/env node</span><span class="token keyword">const</span> yargs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'yargs'</span><span class="token punctuation">)</span><span class="token comment">// 同事还会将掺入的参数解析成对象</span><span class="token function">yargs</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>argv<span class="token comment">// 后者可以写成 </span><span class="token comment">// yargs().parse(process.argv.slice(2))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cli --help<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就会出现</p><pre class="line-numbers language-none"><code class="language-none">选项：  --help     显示帮助信息                                                 [布尔]  --version  显示版本号                                                   [布尔]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="yargs常用的方法"><a href="#yargs常用的方法" class="headerlink" title="yargs常用的方法"></a>yargs常用的方法</h4><p>对应方法的文档可以查看 <a href="https://github.com/yargs/yargs/blob/master/docs/api.md">https://github.com/yargs/yargs/blob/master/docs/api.md</a></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> argv <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">const</span> cli <span class="token operator">=</span> <span class="token function">yargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> constext <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    cliVersion<span class="token operator">:</span> pkg<span class="token punctuation">.</span>version<span class="token punctuation">&#125;</span>cli<span class="token punctuation">.</span><span class="token function">usage</span><span class="token punctuation">(</span><span class="token string">'cli-test [command] &lt;options>'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">'v'</span><span class="token punctuation">,</span> <span class="token string">'version'</span><span class="token punctuation">)</span> <span class="token comment">//别名</span>    <span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'help'</span><span class="token punctuation">)</span>    <span class="token comment">// 定义用户输出的最小长度和最大长度  </span>    <span class="token comment">// https://github.com/yargs/yargs/blob/master/docs/api.md#demandCommand</span>    <span class="token punctuation">.</span><span class="token function">demandCommand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'A command is required'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>cli<span class="token punctuation">.</span><span class="token function">terminalWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 控制台最后输出的内容</span>        <span class="token punctuation">.</span><span class="token function">epilogue</span><span class="token punctuation">(</span>dedent<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> das      aa    asd</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token comment">// 命令</span>    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">'init [name]'</span><span class="token punctuation">,</span> <span class="token string">'Do it in a project'</span><span class="token punctuation">,</span> <span class="token parameter">yargs</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        yargs            <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                type<span class="token operator">:</span> <span class="token string">'string'</span><span class="token punctuation">,</span>                describe<span class="token operator">:</span> <span class="token string">'Name of a project'</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">argv</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">recommendCommands</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        command<span class="token operator">:</span> <span class="token string">'list'</span><span class="token punctuation">,</span>        aliases<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'ls'</span><span class="token punctuation">,</span> <span class="token string">'la'</span><span class="token punctuation">,</span> <span class="token string">'ll'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token function-variable function">builder</span><span class="token operator">:</span> <span class="token parameter">yargs</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>yargs<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token parameter">argv</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        debug<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            type<span class="token operator">:</span> <span class="token string">'boolean'</span><span class="token punctuation">,</span>            describe<span class="token operator">:</span> <span class="token string">'Boostrap debug mode'</span><span class="token punctuation">,</span>            alias<span class="token operator">:</span> <span class="token string">'d'</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token comment">// 选项  如vue create a -r=https://registry.npm.taobao.org/</span>    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">'registry'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        type<span class="token operator">:</span> <span class="token string">'string'</span><span class="token punctuation">,</span>        describe<span class="token operator">:</span> <span class="token string">'Define global registry'</span><span class="token punctuation">,</span>        alias<span class="token operator">:</span> <span class="token string">'r'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">//命令在控制台的分类</span>    <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'debug'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'Dev Options'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">strict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// constext会和argv进行合并</span>    <span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>argv<span class="token punctuation">,</span> constext<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lerna的初始化过程"><a href="#lerna的初始化过程" class="headerlink" title="lerna的初始化过程"></a>lerna的初始化过程</h4><p>lerna的入口文件<code>core/lerna/cli.js</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token hashbang comment">#!/usr/bin/env node</span><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token comment">/* eslint-disable import/no-dynamic-require, global-require */</span><span class="token keyword">const</span> importLocal <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"import-local"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">importLocal</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"npmlog"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"cli"</span><span class="token punctuation">,</span> <span class="token string">"using local version of lerna"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 引入的当前目录下的index.js</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>core/lerna/index.js</code>，该文件中主要是注册了一些命令</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">const</span> cli <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@lerna/cli"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> addCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@lerna/add/command"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> bootstrapCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@lerna/bootstrap/command"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> changedCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@lerna/changed/command"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> cleanCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@lerna/clean/command"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> createCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@lerna/create/command"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> diffCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@lerna/diff/command"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> execCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@lerna/exec/command"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> importCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@lerna/import/command"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> infoCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@lerna/info/command"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> initCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@lerna/init/command"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> linkCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@lerna/link/command"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> listCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@lerna/list/command"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> publishCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@lerna/publish/command"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> runCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@lerna/run/command"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> versionCmd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@lerna/version/command"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> pkg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./package.json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> main<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token parameter">argv</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    lernaVersion<span class="token operator">:</span> pkg<span class="token punctuation">.</span>version<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>addCmd<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>bootstrapCmd<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>changedCmd<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>cleanCmd<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>createCmd<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>diffCmd<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>execCmd<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>importCmd<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>infoCmd<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>initCmd<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>linkCmd<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>listCmd<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>publishCmd<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>runCmd<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>versionCmd<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>argv<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>core/cli/index.js</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">const</span> dedent <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"dedent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> log <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"npmlog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> yargs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"yargs/yargs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> globalOptions <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@lerna/global-options"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> lernaCLI<span class="token punctuation">;</span><span class="token comment">/** * A factory that returns a yargs() instance configured with everything except commands. * Chain .parse() from this method to invoke. * * @param &#123;Array = []&#125; argv * @param &#123;String = process.cwd()&#125; cwd */</span><span class="token keyword">function</span> <span class="token function">lernaCLI</span><span class="token punctuation">(</span><span class="token parameter">argv<span class="token punctuation">,</span> cwd</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> cli <span class="token operator">=</span> <span class="token function">yargs</span><span class="token punctuation">(</span>argv<span class="token punctuation">,</span> cwd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">globalOptions</span><span class="token punctuation">(</span>cli<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">usage</span><span class="token punctuation">(</span><span class="token string">"Usage: $0 &lt;command> [options]"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">demandCommand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"A command is required. Pass --help to see all available commands and options."</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">recommendCommands</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">strict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">msg<span class="token punctuation">,</span> err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// certain yargs validations throw strings :P</span>      <span class="token keyword">const</span> actual <span class="token operator">=</span> err <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// ValidationErrors are already logged, as are package errors</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>actual<span class="token punctuation">.</span>name <span class="token operator">!==</span> <span class="token string">"ValidationError"</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>actual<span class="token punctuation">.</span>pkg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// the recommendCommands() message is too terse</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Did you mean</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>actual<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"lerna"</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Unknown command "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>cli<span class="token punctuation">.</span>parsed<span class="token punctuation">.</span>argv<span class="token punctuation">.</span>_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"lerna"</span><span class="token punctuation">,</span> actual<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// exit non-zero so the CLI can be usefully chained</span>      cli<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>actual<span class="token punctuation">.</span>code <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> actual<span class="token punctuation">.</span>code <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> actual<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">,</span> <span class="token string">"help"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">"v"</span><span class="token punctuation">,</span> <span class="token string">"version"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>cli<span class="token punctuation">.</span><span class="token function">terminalWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">epilogue</span><span class="token punctuation">(</span>dedent<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">      When a command fails, all logs are written to lerna-debug.log in the current working directory.      For more information, find our manual at https://github.com/lerna/lerna    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>core/global-options/index.js</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">const</span> os <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"os"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> globalOptions<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">globalOptions</span><span class="token punctuation">(</span><span class="token parameter">yargs</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// the global options applicable to _every_ command</span>  <span class="token keyword">const</span> opts <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    loglevel<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      defaultDescription<span class="token operator">:</span> <span class="token string">"info"</span><span class="token punctuation">,</span>      describe<span class="token operator">:</span> <span class="token string">"What level of logs to report."</span><span class="token punctuation">,</span>      type<span class="token operator">:</span> <span class="token string">"string"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    concurrency<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      defaultDescription<span class="token operator">:</span> os<span class="token punctuation">.</span><span class="token function">cpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span>      describe<span class="token operator">:</span> <span class="token string">"How many processes to use when lerna parallelizes tasks."</span><span class="token punctuation">,</span>      type<span class="token operator">:</span> <span class="token string">"number"</span><span class="token punctuation">,</span>      requiresArg<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"reject-cycles"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      describe<span class="token operator">:</span> <span class="token string">"Fail if a cycle is detected among dependencies."</span><span class="token punctuation">,</span>      type<span class="token operator">:</span> <span class="token string">"boolean"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"no-progress"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      describe<span class="token operator">:</span> <span class="token string">"Disable progress bars. (Always off in CI)"</span><span class="token punctuation">,</span>      type<span class="token operator">:</span> <span class="token string">"boolean"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    progress<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// proxy for --no-progress</span>      hidden<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      type<span class="token operator">:</span> <span class="token string">"boolean"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"no-sort"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      describe<span class="token operator">:</span> <span class="token string">"Do not sort packages topologically (dependencies before dependents)."</span><span class="token punctuation">,</span>      type<span class="token operator">:</span> <span class="token string">"boolean"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    sort<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// proxy for --no-sort</span>      hidden<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      type<span class="token operator">:</span> <span class="token string">"boolean"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"max-buffer"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      describe<span class="token operator">:</span> <span class="token string">"Set max-buffer (in bytes) for subcommand execution"</span><span class="token punctuation">,</span>      type<span class="token operator">:</span> <span class="token string">"number"</span><span class="token punctuation">,</span>      requiresArg<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// group options under "Global Options:" </span>  <span class="token comment">// 全局options归类为  Global Options:</span>  <span class="token keyword">const</span> globalKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"help"</span><span class="token punctuation">,</span> <span class="token string">"version"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> yargs    <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>globalKeys<span class="token punctuation">,</span> <span class="token string">"Global Options:"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"ci"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      hidden<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      type<span class="token operator">:</span> <span class="token string">"boolean"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lerna的command"><a href="#lerna的command" class="headerlink" title="lerna的command"></a>lerna的command</h4><p>list命令</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">const</span> filterable <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@lerna/filter-options"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> listable <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@lerna/listable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * @see https://github.com/yargs/yargs/blob/master/docs/advanced.md#providing-a-command-module */</span>exports<span class="token punctuation">.</span>command <span class="token operator">=</span> <span class="token string">"list"</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>aliases <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"ls"</span><span class="token punctuation">,</span> <span class="token string">"la"</span><span class="token punctuation">,</span> <span class="token string">"ll"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>describe <span class="token operator">=</span> <span class="token string">"List local packages"</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span><span class="token function-variable function">builder</span> <span class="token operator">=</span> <span class="token parameter">yargs</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  listable<span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span>yargs<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">filterable</span><span class="token punctuation">(</span>yargs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span><span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">argv</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="import-local"><a href="#import-local" class="headerlink" title="import-local"></a>import-local</h4><p>在lerna的入口文件中，导入了<code>import-local</code>模块</p><p>在lerna开始执行时会先判断本地是否安装lerna，如果已经安装了，就导入本地安装的，否则就导入全局安装的lerna文件</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token hashbang comment">#!/usr/bin/env node</span><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token comment">/* eslint-disable import/no-dynamic-require, global-require */</span><span class="token keyword">const</span> importLocal <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"import-local"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">importLocal</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"npmlog"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"cli"</span><span class="token punctuation">,</span> <span class="token string">"using local version of lerna"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>import-local</code>中的源码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> resolveCwd <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'resolve-cwd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> pkgDir <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'pkg-dir'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token parameter">filename</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> globalDir <span class="token operator">=</span> pkgDir<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> relativePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">relative</span><span class="token punctuation">(</span>globalDir<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> pkg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>globalDir<span class="token punctuation">,</span> <span class="token string">'package.json'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> localFile <span class="token operator">=</span> resolveCwd<span class="token punctuation">.</span><span class="token function">silent</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>pkg<span class="token punctuation">.</span>name<span class="token punctuation">,</span> relativePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Use `path.relative()` to detect local package installation,</span><span class="token comment">// because __filename's case is inconsistent on Windows</span><span class="token comment">// Can use `===` when targeting Node.js 8</span><span class="token comment">// See https://github.com/nodejs/node/issues/6624</span><span class="token keyword">return</span> localFile <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">.</span><span class="token function">relative</span><span class="token punctuation">(</span>localFile<span class="token punctuation">,</span> filename<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">''</span> <span class="token operator">?</span> <span class="token function">require</span><span class="token punctuation">(</span>localFile<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 脚手架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>脚手架</title>
      <link href="/blog/2021/01/10/scaffolding/"/>
      <url>/blog/2021/01/10/scaffolding/</url>
      
        <content type="html"><![CDATA[<h2 id="脚手架的本质作用"><a href="#脚手架的本质作用" class="headerlink" title="脚手架的本质作用"></a>脚手架的本质作用</h2><p>创建项目的基础解构、提供项目规范和约定</p><ul><li>相同的组织结构</li><li>相同的开发方式</li><li>相同的模块依赖</li><li>相同的工具配置</li><li>相同的基础代码</li></ul><p>常用的脚手架工具</p><ul><li>根据信息创建对应的项目基础结构（create-app、vue-cli）</li><li>Yeoman</li><li>Plop(例如创建一个组件、模块所需的文件)<h2 id="Yeoman"><a href="#Yeoman" class="headerlink" title="Yeoman"></a>Yeoman</h2>安装<a href="https://yeoman.io/">yeoman</a><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> yo -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>安装generator<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装对应的generator</span><span class="token function">npm</span> <span class="token function">install</span> generator-node -g<span class="token comment"># 运行脚手架</span>yo node<span class="token comment"># 创建cli文件</span>yo node:cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义generator"><a href="#自定义generator" class="headerlink" title="自定义generator"></a>自定义generator</h3><img src="https://gitee.com/shibin1/fed-e-task-02-01/raw/master/note/img/2.jpg" alt="generator基本结构"></li></ul><p>Yeoman的Generator模块名称必须是<code>generator-&lt;name&gt;</code></p><p>首先创建对应的项目结构</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> yeoman-generator<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>generators/app.js</code></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> Generator <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'yeoman-generator'</span><span class="token punctuation">)</span><span class="token comment">/** * 此文件为Generator的入口文件 * 需要导出一个继承自yeoman-generator的类型 * 在工作时会自动调用我们在此声明的一些生命周期方法 */</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Generator <span class="token punctuation">&#123;</span>    <span class="token comment">//生成文件时会调用此方法</span>    <span class="token function">wriging</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fs<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">destinationPath</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">link</span>yo <span class="token operator">&lt;</span>name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建模板文件夹<code> generators/app/teplates</code>，该文件夹用于存放模板文件，模板为ejs模板</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> Generator <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'yeoman-generator'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Generator <span class="token punctuation">&#123;</span>    <span class="token function">wriging</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 对应模板文件夹下的index.html</span>        <span class="token keyword">const</span> tpl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">templatePath</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">'Yeoman'</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">'Yeoman is great!'</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">const</span> output <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">destinationPath</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fs<span class="token punctuation">.</span><span class="token function">copyTpl</span><span class="token punctuation">(</span>tpl<span class="token punctuation">,</span> output<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接收用户输入</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Generator <span class="token punctuation">&#123;</span>    <span class="token comment">// 用于接收用户输入</span>    <span class="token function">prompting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>            type<span class="token operator">:</span> <span class="token string">'input'</span><span class="token punctuation">,</span>            name<span class="token operator">:</span> <span class="token string">'title'</span><span class="token punctuation">,</span>            message<span class="token operator">:</span> <span class="token string">'Your title'</span><span class="token punctuation">,</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>appname        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            type<span class="token operator">:</span> <span class="token string">'input'</span><span class="token punctuation">,</span>            name<span class="token operator">:</span> <span class="token string">'content'</span><span class="token punctuation">,</span>            message<span class="token operator">:</span> <span class="token string">'Your content'</span><span class="token punctuation">,</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>appname        <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">answers</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>answers<span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>answers <span class="token operator">=</span> answers        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//生成文件时会调用此方法</span>    <span class="token function">wriging</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 对应模板文件夹下的index.html</span>        <span class="token keyword">const</span> tpl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">templatePath</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>answers        <span class="token keyword">const</span> output <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">destinationPath</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fs<span class="token punctuation">.</span><span class="token function">copyTpl</span><span class="token punctuation">(</span>tpl<span class="token punctuation">,</span> output<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Plop"><a href="#Plop" class="headerlink" title="Plop"></a>Plop</h2><ul><li>将<a href="https://github.com/plopjs/plop">plop</a>模块作为项目开发依赖安装</li><li>在项目根目录下创建一个plopfile.js文件,定义脚手架任务</li><li>编写用于生成特定类型文件的模板</li><li>通过Plop提供的CLI运行脚手架服务</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> plop --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>plopfile.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token parameter">plop</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    plop<span class="token punctuation">.</span><span class="token function">setGenerator</span><span class="token punctuation">(</span><span class="token string">'component'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>        description<span class="token operator">:</span> <span class="token string">'create a component'</span><span class="token punctuation">,</span>        prompts<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>            type<span class="token operator">:</span><span class="token string">'input'</span><span class="token punctuation">,</span>            name<span class="token operator">:</span><span class="token string">'name'</span><span class="token punctuation">,</span>            message<span class="token operator">:</span><span class="token string">'Component name'</span><span class="token punctuation">,</span>            <span class="token keyword">default</span><span class="token operator">:</span><span class="token string">'MyComponent'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        actions<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>            type<span class="token operator">:</span><span class="token string">'add'</span><span class="token punctuation">,</span>            path<span class="token operator">:</span><span class="token string">'src/components/&#123;&#123;name&#125;&#125;/&#123;&#123;name&#125;&#125;.js'</span><span class="token punctuation">,</span>            templateFile<span class="token operator">:</span><span class="token string">'templates/component.hbs'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="脚手架的工作原理"><a href="#脚手架的工作原理" class="headerlink" title="脚手架的工作原理"></a>脚手架的工作原理</h2><p>创建项目,在package.json文件中指定bin(指定cli的入口文件)</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>    <span class="token string">"bin"</span> <span class="token operator">:</span><span class="token string">"cli.js"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>cli.js</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token hashbang comment">#! /usr/bin/env node</span><span class="token comment">// cli文件开头必须这样写</span><span class="token comment">// 如果是Linux或macOS系统还需要修改此文件的读写权限为755，具体就是通过 chmod 755 cli.js 实现修改</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> inquirer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'inquirer'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> ejs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ejs'</span><span class="token punctuation">)</span>inquirer<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> <span class="token string">'input'</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span>    message<span class="token operator">:</span> <span class="token string">'project name'</span><span class="token punctuation">,</span>    required<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">answers</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>answers<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'cancel'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> tmpDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'templates'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> destDir <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>tmpDir<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> files</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">file</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            ejs<span class="token punctuation">.</span><span class="token function">renderFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>tmpDir<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">,</span> answers<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>                fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>destDir<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后执行，就可以进行本地调试</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">link</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>取消本地链接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将当前项目从全局node_modules中删除</span><span class="token function">npm</span> unlink<span class="token comment"># link存在取消当前项目链接</span><span class="token function">npm</span> unlink your-lib<span class="token comment"># link不存在</span><span class="token function">rm</span> -rf node_modules<span class="token function">npm</span> <span class="token function">install</span> -S your-lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问题</p><ul><li>为什么全局安装<code>npm install -g @vue/cli</code>后会添加命令为vue？</li><li>全局安装@vue/cli发生了什么？</li><li>执行vue命令发生了什么？为什么vue指向一个js文件，为什么我们可以直接通过vue命令去执行它？</li></ul><p><code>npm install -g @vue/cli</code>后，vue的安装目录下package.json下bin决定了vue的命令</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  <span class="token string">"bin"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"vue"</span><span class="token operator">:</span> <span class="token string">"bin/vue.js"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在执行vue命令时就会执行上面<code>bin/vue.js</code>文件</p><p>js文件无法直接执行，但是在js代码开头加上<code>#! /usr/bin/env node</code>就可以直接执行js代码了。其中<code>/usr/bin/env</code> 指的就是环境变量，<code>/usr/bin/env node</code>就是在环境变量中查找node。其实就相当于执行了<code>node xx.js</code>命令</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token hashbang comment">#! /usr/bin/env node</span>xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>/usr/bin/env</code>也可以替换为node的安装路径，但是这样做可能会导致在别人的电脑上无法运行，因为每个人node的安装路径可能会不一样</p><h3 id="脚手架参数"><a href="#脚手架参数" class="headerlink" title="脚手架参数"></a>脚手架参数</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es6基础</title>
      <link href="/blog/2021/01/01/es6+/"/>
      <url>/blog/2021/01/01/es6+/</url>
      
        <content type="html"><![CDATA[<p>部分内容参考了<a href="https://es6.ruanyifeng.com/">《ECMAScript 6 入门》</a></p><h2 id="ES2015"><a href="#ES2015" class="headerlink" title="ES2015"></a>ES2015</h2><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>在es6之前，只有两种作用域</p><ul><li>全局作用域</li><li>函数作用域</li></ul><p>es6新增了块级作用域，可以使用<code>let</code>和<code>const</code>声明</p><h4 id="let"><a href="#let" class="headerlink" title="let"></a>let</h4><p>let 可以用来声明变量，它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">//100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>将变量a换成使用let或const声明后,就会报错</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">//ReferenceError: a is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果使用let，声明的变量仅在块级作用域内有效</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，变量i是let声明的，当前的i只在本轮循环有效，所以每一次循环的i其实都是一个新的变量，所以最后输出的是6。</p><h5 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h5><p>var命令会发生“变量提升”现象，即变量可以在声明之前使用，值为undefined。但let或const声明的变量不存在变量提升</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// var 的情况</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出undefined</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// let 的情况</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错ReferenceError</span><span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h5><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  tmp <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError</span>  <span class="token keyword">let</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，存在全局变量tmp，但是块级作用域内let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，所以在let声明变量前，对tmp赋值会报错。</p><p>ES6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p><p>总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。</p><h5 id="不允许重复声明"><a href="#不允许重复声明" class="headerlink" title="不允许重复声明"></a>不允许重复声明</h5><p>let不允许在相同作用域内，重复声明同一个变量。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 报错</span><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 报错</span><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><p>const用来声明一个只读的常量。一旦声明，常量的值就不能改变。其他的跟let一样</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 为 foo 添加一个属性，可以成功</span>foo<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span>prop <span class="token comment">// 123</span><span class="token comment">// 将 foo 指向另一个对象，就会报错</span>foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: "foo" is read-only</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在开发环境允许的条件下，声明变量时不要使用var，能用const就使用const，不能用就使用let</p><h3 id="变量解构赋值"><a href="#变量解构赋值" class="headerlink" title="变量解构赋值"></a>变量解构赋值</h3><h4 id="数组的解构"><a href="#数组的解构" class="headerlink" title="数组的解构"></a>数组的解构</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token comment">// 1 2 3</span><span class="token keyword">let</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token comment">// 3</span><span class="token keyword">let</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。如果匹配不成功，变量的值就是<code>undefined</code></p><p>可以使用<code>...</code>来匹配剩余的元素</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">[</span>e<span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token operator">...</span>f<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token comment">// [ 3, 4, 5, 6 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>默认值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// x='a', y='b'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，ES6 内部使用严格相等运算符（===），判断一个位置是否有值。所以，只有当一个数组成员严格等于undefined，默认值才会生效。</p><h4 id="对象的解构"><a href="#对象的解构" class="headerlink" title="对象的解构"></a>对象的解构</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js">lconst obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'Shibin'</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token string">'17'</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age <span class="token punctuation">&#125;</span> <span class="token operator">=</span> objconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token comment">//Shibin 17</span><span class="token comment">// 如果变量名与属性名不一致，可以这样写</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span> name<span class="token operator">:</span> MyName <span class="token punctuation">&#125;</span> <span class="token operator">=</span> objconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>MyName<span class="token punctuation">)</span><span class="token comment">// 默认值</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> myTitle <span class="token operator">=</span> <span class="token string">'Hello'</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> objconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myTitle<span class="token punctuation">)</span> <span class="token comment">//Hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h4><p>模板字符串中嵌入变量，需要将变量名写在${}之中。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'Shibin'</span><span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token comment">// Hello,Shibin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>大括号内部可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">1 + 2 = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token comment">// 1 + 2 = 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。</p><h5 id="带标签的模板字符串"><a href="#带标签的模板字符串" class="headerlink" title="带标签的模板字符串"></a>带标签的模板字符串</h5><p>模板字符串可以紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'Shibin'</span><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token string">'17'</span><span class="token keyword">function</span> <span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment">// [ 'My name is ', ". I'm ", ' years old' ]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token comment">// Shibin 17</span>    <span class="token keyword">let</span> old <span class="token operator">=</span> age <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> years old</span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> year old</span><span class="token template-punctuation string">`</span></span>    <span class="token keyword">return</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> name <span class="token operator">+</span> str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> old<span class="token punctuation">&#125;</span><span class="token keyword">let</span> res <span class="token operator">=</span> myFunc<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">. I'm </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// My name is Shibin. I'm 1 year old</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h4><ul><li>includes  是否包含xxx字符串</li><li>startsWith 是否以xxx开头</li><li>endsWith  是否以xxx结尾<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'https//www.github.com'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'github'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'https'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'com'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token string">'World'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span> <span class="token comment">// Hello World</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>通常情况下，定义了默认值的参数，应该是函数的尾参数。因为这样比较容易看出来，到底省略了哪些参数。如果非尾部的参数设置默认值，实际上这个参数是没法省略的。<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// [1, undefined]</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// [2, undefined]</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>所以在使用开发过程中,一定要没有默认值的参数在前，有默认值的参数在后</li></ul><p>可以使用…获取剩余的参数,也要放到最后再使用</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> <span class="token operator">...</span>b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// [ 2, 3, 4, 5 ]</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="展开数组和对象"><a href="#展开数组和对象" class="headerlink" title="展开数组和对象"></a>展开数组和对象</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [ 1, 2, 3, 4 ]</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'Shibin'</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token string">'17'</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token operator">...</span>obj<span class="token punctuation">,</span>    sex<span class="token operator">:</span> <span class="token string">'boy'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//&#123; name: 'Shibin', age: '17', sex: 'boy' &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>es6允许使用=&gt;定义函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token parameter">a</span> <span class="token operator">=></span> a<span class="token comment">// 等同于</span><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token parameter">a</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> <span class="token function-variable function">getTempItem</span> <span class="token operator">=</span> <span class="token parameter">id</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> id<span class="token operator">:</span> id<span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"Temp"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 报错</span><span class="token keyword">let</span> <span class="token function-variable function">getTempItem</span> <span class="token operator">=</span> <span class="token parameter">id</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> id<span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"Temp"</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>箭头函数不会改变this的指向，即函数内部this指向和函数外面this的指向一样</p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h4><p>当变量名与对象的属性名一样时，可以直接省略调冒号+属性值，写成下面的样子</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    foo<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>    bar<span class="token punctuation">,</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 等价于</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    foo<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>    bar<span class="token operator">:</span> bar<span class="token punctuation">,</span>    func<span class="token operator">:</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在声明对象时，还可以使用 <code>[计算属性值]: 属性值</code>来声明动态的属性值</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token string">'a'</span> <span class="token operator">+</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">'aabb'</span><span class="token punctuation">&#125;</span><span class="token comment">// 等价于</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    ab<span class="token operator">:</span> <span class="token string">'aabb'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h4><p>Object.assign  将多个对象中的属性（可枚举属性）复制到一个目标对象中，后面的属性会覆盖前面的对象</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'Shibin'</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    age<span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>    sex<span class="token operator">:</span> <span class="token string">'boy'</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> target <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token comment">// &#123; name: 'Shibin', age: 17, sex: 'boy' &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is"></a>Object.is</h4><p>判断两个变量是否相等</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h4><p>Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程</p><p>Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'Shibin'</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> personProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token comment">// &#123; name: 'Shibin', age: 17 &#125; name</span>        <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>     <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">'age'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> val <span class="token operator">!==</span> <span class="token string">'number'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'age must be number'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val <span class="token comment">// &#123; name: 'Shibin', age: 17 &#125; sex boy</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>personProxy<span class="token punctuation">.</span>name<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>personProxy<span class="token punctuation">.</span>age<span class="token punctuation">)</span>personProxy<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'boy'</span>age<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">'aa'</span> <span class="token comment">//报错  Error: age must be number</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Proxy相对于Object-defineProperty的优势"><a href="#Proxy相对于Object-defineProperty的优势" class="headerlink" title="Proxy相对于Object.defineProperty的优势"></a>Proxy相对于Object.defineProperty的优势</h4><ul><li>可以监听对象的删除</li><li>更好的支持数组对象的监视<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'Shibin'</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> personProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function">deleteProperty</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token comment">// &#123; name: 'Shibin', age: 17 &#125; age</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">delete</span> personProxy<span class="token punctuation">.</span>age<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">const</span> personArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span>        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val  <span class="token comment">// [ 1, 2, 3, 4, 5 ] 5 6  </span>                           <span class="token comment">// [ 1, 2, 3, 4, 5, 6 ] length 6  </span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>personArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>Proxy是以非侵入的方式监管了对象的读写</li></ul><p>其他属性参考  <a href="https://es6.ruanyifeng.com/#docs/proxy">https://es6.ruanyifeng.com/#docs/proxy</a></p><h4 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h4><p>Reflect成员方法就是Proxy处理对象的默认实现。Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'Shibin'</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> personProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它统一提供了一套用于操作对象的API</p><p>一共提供了13个静态方法</p><ul><li>Reflect.apply(target, thisArg, args)</li><li>Reflect.construct(target, args)</li><li>Reflect.get(target, name, receiver)</li><li>Reflect.set(target, name, value, receiver)</li><li>Reflect.defineProperty(target, name, desc)</li><li>Reflect.deleteProperty(target, name)</li><li>Reflect.has(target, name)</li><li>Reflect.ownKeys(target)</li><li>R*eflect.isExtensible(target)</li><li>Reflect.preventExtensions(target)</li><li>Reflect.getOwnPropertyDescriptor(target, name)</li><li>Reflect.getPrototypeOf(target)</li><li>Reflect.setPrototypeOf(target, prototype)</li></ul><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">&#125;</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello,my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">)</span>person<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Hello,my name is Tom</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> <span class="token function">classMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Foo<span class="token punctuation">.</span><span class="token function">classMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 'hello'</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span><span class="token function">classMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Class的继承"><a href="#Class的继承" class="headerlink" title="Class的继承"></a>Class的继承</h4><p>Class 可以通过extends关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">&#125;</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello,my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token punctuation">&#125;</span>    <span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>student<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Hello,my name is Tom</span>student<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>super关键字，它在这里表示父类的构造函数，用来新建父类的this对象。 子类必须在constructor方法中调用super方法，否则新建实例时会报错</p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>类似于数组，但是成员的值都是唯一的，没有重复的值。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// Set(3) &#123; 1, 2, 3 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Set的方法</p><ul><li>Set.prototype.add(value)：添加某个值，返回 Set 结构本身。</li><li>Set.prototype.delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。</li><li>Set.prototype.has(value)：返回一个布尔值，表示该值是否为Set的成员。</li><li>Set.prototype.clear()：清除所有成员，没有返回值。</li><li>Set.prototype.size：返回Set实例的成员总数。</li></ul><p>Set的遍历操作</p><ul><li>Set.prototype.keys()：返回键名的遍历器</li><li>Set.prototype.values()：返回键值的遍历器</li><li>Set.prototype.entries()：返回键值对的遍历器</li><li>Set.prototype.forEach()：使用回调函数遍历每个成员</li></ul><p>Set转换为数组</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [ 1, 2, 3 ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// [ 1, 2, 3 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h3><p>WeakSet 结构与 Set 类似，也是不重复的值的集合.但是，它与 Set 有两个区别。</p><ul><li>WeakSet 的成员只能是对象，而不能是其他类型的值。</li><li>WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用。也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。</li></ul><p>这是因为垃圾回收机制依赖引用计数，如果一个值的引用次数不为0，垃圾回收机制就不会释放这块内存。结束使用该值之后，有时会忘记取消引用，导致内存无法释放，进而可能会引发内存泄漏。WeakSet 里面的引用，都不计入垃圾回收机制，所以就不存在这个问题。因此，WeakSet 适合临时存放一组对象，以及存放跟对象绑定的信息。只要这些对象在外部消失，它在 WeakSet 里面的引用就会自动消失。</p><p>这些特点同样适用于 WeakMap 结构。</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'tom'</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// Map(1) &#123; &#123; name: 'tom' &#125; => 100 &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//100</span><span class="token comment">// 清除set中的内容</span>a<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">//Map(0) &#123;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Map实例的属性方法</p><ul><li>size 返回 Map 结构的成员总数。</li><li>Map.prototype.set(key, value)</li><li>Map.prototype.get(key)</li><li>Map.prototype.has(key)  表示某个键是否在当前 Map 对象之中</li><li>Map.prototype.delete(key)  delete删除某个键，返回true。如果删除失败，返回false。</li><li>Map.prototype.clear() 清除所有成员</li></ul><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>一种新的原始数据类型Symbol，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token comment">//false</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span>obj<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// &#123; [Symbol(123)]: 200, [Symbol(123)]: 100 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 Symbol 类型。</p><p>有时，我们希望重新使用同一个 Symbol 值,可以使用Symbol.for()</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> s1 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Object.keys和for in循环无法获取到属性名为symbol的属性，可以使用getOwnPropertySymbols获取到属性名为symbol的属性</p><h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><p>Iterator 的作用有三个：</p><ul><li>为各种数据结构，提供一个统一的、简便的访问接口</li><li>使得数据结构的成员能够按某种次序排列</li><li>ES6 创造了一种新的遍历命令for…of循环，Iterator 接口主要供for…of消费</li></ul><p>Iterator 的遍历过程是这样的</p><ol><li>创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象</li><li>第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员</li><li>第二次调用指针对象的next方法，指针就指向数据结构的第二个成员</li><li>不断调用指针对象的next方法，直到它指向数据结构的结束位置</li></ol><p>每一次调用next方法，都会返回数据结构的当前成员的信息。具体来说，就是返回一个包含value和done两个属性的对象。其中，value属性是当前成员的值，done属性是一个布尔值，表示遍历是否结束。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 实现Iterator 接口</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>          value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          done<span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ES6 规定，默认的 Iterator 接口部署在数据结构的Symbol.iterator属性，或者说，一个数据结构只要具有Symbol.iterator属性，就可以认为是“可遍历的”</p><p>原生具备 Iterator 接口的数据结构如下</p><ul><li>Array</li><li>Map</li><li>Set</li><li>String</li><li>TypedArray</li><li>函数的 arguments 对象</li><li>NodeList 对象</li></ul><p>对象（Object）之所以没有默认部署 Iterator 接口，是因为对象的哪个属性先遍历，哪个属性后遍历是不确定的，需要开发者手动指定</p><h3 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h3><p>作为遍历所有数据结构的统一的方法。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">900</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 输出</span><span class="token comment">// 100</span><span class="token comment">// 200</span><span class="token comment">// 300</span><span class="token comment">// 400</span><span class="token comment">// 900</span><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 输出</span><span class="token comment">// 100</span><span class="token comment">// 200</span><span class="token comment">// 300</span><span class="token comment">// 400</span><span class="token comment">// 900</span><span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'tom'</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 输出</span><span class="token comment">// [ 'name', 'tom' ]</span><span class="token comment">// [ 'age', 20 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>在function关键字与函数名加上一个星号就是生成器函数，函数体内部可以使用yied表达式</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'foo'</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//&#123; value: 'foo', done: true &#125;</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token string">'1'</span>    <span class="token keyword">yield</span> <span class="token string">'2'</span>    <span class="token keyword">return</span> <span class="token string">'foo'</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//&#123; value: '1', done: false &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//&#123; value: '2', done: false &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Generator 函数是分段执行的，yield表达式是暂停执行的标记，而next方法可以恢复执行。</p><p>遍历器对象的next方法的运行逻辑如下。</p><ul><li>遇到yield表达式，就暂停执行后面的操作，并将紧跟在yield后面的那个表达式的值，作为返回的对象的value属性值。</li><li>下一次调用next方法时，再继续往下执行，直到遇到下一个yield表达式。</li><li>如果没有再遇到新的yield表达式，就一直运行到函数结束，直到return语句为止，并将return语句后面的表达式的值，作为返回的对象的value属性值。</li><li>如果该函数没有return语句，则返回的对象的value属性值为undefined。</li></ul><p>yield表达式本身没有返回值，或者说总是返回undefined。next方法可以带一个参数，该参数就会被当作上一个yield表达式的返回值。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*next方法没有参数，每次运行到yield表达式，变量reset的值总是undefined。当next方法带一个参数true时，变量reset就被重置为这个参数（即true），因此i会等于-1，下一轮循环就会从-1开始递增。*/</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token boolean">true</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> reset <span class="token operator">=</span> <span class="token keyword">yield</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>reset<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &#123; value: 0, done: false &#125;</span>g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &#123; value: 1, done: false &#125;</span>g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// &#123; value: 0, done: false &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ES2016"><a href="#ES2016" class="headerlink" title="ES2016"></a>ES2016</h2><h3 id="Array-prototype-inclodes"><a href="#Array-prototype-inclodes" class="headerlink" title="Array.prototype.inclodes"></a>Array.prototype.inclodes</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment">// true</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>     <span class="token comment">// false</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>该方法的第二个参数表示搜索的起始位置，默认为0。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度</p><p>indexOf方法有两个缺点，一是不够语义化，它的含义是找到参数值的第一个出现位置，所以要去比较是否不等于-1，表达起来不够直观。二是，它内部使用严格相等运算符（===）进行判断，这会导致对NaN的误判。</p><h3 id="指数运算符"><a href="#指数运算符" class="headerlink" title="指数运算符"></a>指数运算符</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// es5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// es2016</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ES2017"><a href="#ES2017" class="headerlink" title="ES2017"></a>ES2017</h2><h3 id="bject-values"><a href="#bject-values" class="headerlink" title="bject.values()"></a>bject.values()</h3><p>返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> foo<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> baz<span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [ 'bar', 42 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries()"></a>Object.entries()</h3><p>方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> foo<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> baz<span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token comment">// [ ["foo", "bar"], ["baz", 42] ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果原对象的属性名是一个 Symbol 值，该属性会被忽略。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span> foo<span class="token operator">:</span> <span class="token string">'abc'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// [ [ 'foo', 'abc' ] ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Object.entries的基本用途是遍历对象的属性。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> foo<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> baz<span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// foo bar</span><span class="token comment">// baz 42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors"></a>Object.getOwnPropertyDescriptors</h3><p>返回指定对象所有自身属性（非继承属性）的描述对象。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> f1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    name<span class="token operator">:</span> <span class="token string">'Shibin'</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token keyword">get</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> f2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> f1<span class="token punctuation">)</span>f2<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">17</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span>say<span class="token punctuation">)</span> <span class="token comment">//&#123; name: 'Shibin', age: 17, say: 'Shibin:10' &#125;</span><span class="token keyword">const</span> descriptors <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token keyword">const</span> f3 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> descriptors<span class="token punctuation">)</span>f3<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f3<span class="token punctuation">.</span>say<span class="token punctuation">)</span> <span class="token comment">//Shibin:18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="String-prototype-padEnd-String-prototype-padStart"><a href="#String-prototype-padEnd-String-prototype-padStart" class="headerlink" title="String.prototype.padEnd  String.prototype.padStart"></a>String.prototype.padEnd  String.prototype.padStart</h3><p>字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。padStart()用于头部补全，padEnd()用于尾部补全。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> str<span class="token operator">=</span><span class="token string">'123'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 12300000</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 00000123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="伪逗号"><a href="#伪逗号" class="headerlink" title="伪逗号"></a>伪逗号</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 函数参数末尾添加伪逗号</span><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
